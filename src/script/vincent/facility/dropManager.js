// Generated by CoffeeScript 1.10.0
(function() {
  var DropManager,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DropManager = (function(superClass) {
    extend(DropManager, superClass);

    function DropManager(editor) {
      this.editor = editor;
      DropManager.__super__.constructor.call(this);
      this.initEvent(document.body);
    }

    DropManager.prototype.initEvent = function(target) {
      target.addEventListener("dragstart", (function(_this) {
        return function(e) {
          return e.preventDefault();
        };
      })(this));
      target.addEventListener("dragover", (function(_this) {
        return function(e) {
          var transfer;
          e.preventDefault();
          transfer = e.dataTransfer;
          if (!transfer) {
            return;
          }
          if (transfer.items.length > 0) {
            return _this.emit("files", e, transfer.items.length);
          }
        };
      })(this));
      target.addEventListener("dragleave", (function(_this) {
        return function(e) {
          return _this.emit("leave");
        };
      })(this));
      return target.addEventListener("drop", (function(_this) {
        return function(e) {
          var blob, i, item, len, ref, transfer, type;
          transfer = e.dataTransfer;
          if (!transfer) {
            return;
          }
          if (!e.defaultPrevented) {
            ref = transfer.items || {};
            for (i = 0, len = ref.length; i < len; i++) {
              item = ref[i];
              type = item.type || "";
              if (type.indexOf("image/") === 0) {
                blob = item.getAsFile();
                if (blob instanceof Blob) {
                  _this.emit("image", {
                    blob: blob
                  });
                  Logger.debug("image", blob, "at drop");
                }
              }
            }
          }
          e.preventDefault();
          e.stopImmediatePropagation();
          return _this.emit("leave");
        };
      })(this));
    };

    return DropManager;

  })(Leaf.EventEmitter);

  module.exports = DropManager;

}).call(this);
