// Generated by CoffeeScript 1.10.0
(function() {
  var COMCursor, DOMBoundary, DOMTraverse, Debounce, Highlight, HighlightRect, HighlightSession, Highlighter, ReflowProcedure,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DOMBoundary = require("../common/boundary");

  Debounce = require("/component/debounce");

  COMCursor = require("../com/cursor");

  DOMTraverse = require("../common/traverse");

  Highlighter = (function() {
    function Highlighter(buffer) {
      this.buffer = buffer;
    }

    Highlighter.prototype.createSession = function() {
      return new HighlightSession(this.buffer);
    };

    return Highlighter;

  })();

  HighlightSession = (function() {
    function HighlightSession(buffer) {
      this.buffer = buffer;
      this.lights = [];
      this.reflowDebouncer = new Debounce({
        time: 10
      }, (function(_this) {
        return function() {
          return _this._reflow();
        };
      })(this));
      this.reflowProcedure = new ReflowProcedure(this);
    }

    HighlightSession.prototype.clear = function() {
      var i, len, light, ref;
      ref = this.lights;
      for (i = 0, len = ref.length; i < len; i++) {
        light = ref[i];
        light.clear();
        light.destroy();
      }
      this.lights.length = 0;
      return this.buffer.stopListenBy(this);
    };

    HighlightSession.prototype.addHighlight = function(start, end, option) {
      var light;
      light = new Highlight(this.buffer, start, end, option);
      this.lights.push(light);
      return light;
    };

    HighlightSession.prototype.applyAll = function(option) {
      var i, len, light, ref;
      if (option == null) {
        option = {};
      }
      if (!this.buffer.isActive) {
        return;
      }
      ref = this.lights;
      for (i = 0, len = ref.length; i < len; i++) {
        light = ref[i];
        light.apply();
      }
      this.buffer.stopListenBy(this);
      this.buffer.listenBy(this, "reflow", this.reflow.bind(this));
      this.buffer.listenBy(this, "resize", this.reflow.bind(this));
      if (this.buffer.isActive) {
        if (option.force) {
          return this.forceReflow();
        } else {
          return this.reflow();
        }
      }
    };

    HighlightSession.prototype.reflow = function() {
      if (!this.buffer.isActive) {
        return;
      }
      return this.reflowDebouncer.trigger();
    };

    HighlightSession.prototype.forceReflow = function() {
      return this._reflow();
    };

    HighlightSession.prototype._reflow = function() {
      if (!this.buffer.isActive) {
        return;
      }
      this.reflowProcedure.reset();
      return this.reflowProcedure.start();
    };

    return HighlightSession;

  })();

  Highlight = (function() {
    function Highlight(buffer, startAnchor, endAnchor, option1) {
      this.buffer = buffer;
      this.startAnchor = startAnchor;
      this.endAnchor = endAnchor;
      this.option = option1 != null ? option1 : {};
      this.rects = [];
      this.startCursor = this.buffer.context.createCursor();
      this.endCursor = this.buffer.context.createCursor();
      this.startCursor.pointAtAnchor(this.startAnchor);
      this.endCursor.pointAtAnchor(this.endAnchor);
      this.startCursor.name = "STName";
      this.endCursor.name = "ECName";
      this.startCursor.listenBy(this, "move", (function(_this) {
        return function() {
          return _this.buffer.nextRender(function() {
            return _this.delayReshow();
          });
        };
      })(this));
      this.endCursor.listenBy(this, "move", (function(_this) {
        return function() {
          return _this.buffer.nextRender(function() {
            return _this.delayReshow();
          });
        };
      })(this));
    }

    Highlight.prototype.delayReshow = function(time) {
      var trigger;
      return;
      trigger = Debounce.debounce({
        time: 0
      }, (function(_this) {
        return function() {
          if (_this.isDestroyed) {
            return;
          }
          if (!_this.isShow) {
            return false;
          }
          _this.apply();
          return _this.show();
        };
      })(this));
      trigger();
      return window.doTrigger = trigger;
    };

    Highlight.prototype.setOption = function(option) {
      var i, len, prop, rect, ref, results;
      if (option == null) {
        option = {};
      }
      for (prop in option) {
        this.option[prop] = option[prop];
      }
      ref = this.rects;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        rect = ref[i];
        results.push(rect.setOption(option));
      }
      return results;
    };

    Highlight.prototype.apply = function() {
      var TextType, area, clientRects, e, end, error, i, item, j, k, len, len1, len2, range, rect, rects, results, start, texts;
      this.clear();
      start = this.startCursor.getBoundary();
      end = this.endCursor.getBoundary();
      try {
        range = DOMBoundary.createRangeBetween(start, end);
      } catch (error) {
        e = error;
        Logger.error("fail to create highlight range", start, end);
        return;
      }
      TextType = 3;
      texts = [];
      this.rects.length = 0;
      DOMTraverse.traverseRange(range, function(node) {
        if (node.nodeType === TextType) {
          texts.push(node);
        }
        return false;
      });
      rects = [];
      for (i = 0, len = texts.length; i < len; i++) {
        item = texts[i];
        if (item === range.startContainer) {
          start = range.startOffset;
        } else {
          start = 0;
        }
        if (item === range.endContainer) {
          end = range.endOffset;
        } else {
          end = item.length;
        }
        if (start >= end) {
          continue;
        }
        area = document.createRange();
        area.setStart(item, start);
        area.setEnd(item, end);
        clientRects = area.getClientRects();
        for (j = 0, len1 = clientRects.length; j < len1; j++) {
          rect = clientRects[j];
          rects.push(rect);
        }
      }
      this.clear();
      this.buffer.viewPort.baseRect = null;
      results = [];
      for (k = 0, len2 = rects.length; k < len2; k++) {
        item = rects[k];
        if (item.left === item.right) {
          continue;
        }
        item = this.buffer.viewPort.resolveRectWithTop(item);
        rect = new HighlightRect(this.buffer, item, this.option);
        results.push(this.rects.push(rect));
      }
      return results;
    };

    Highlight.prototype.show = function() {
      var i, item, len, ref, results;
      this.isShow = true;
      ref = this.rects || [];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        results.push(item.show());
      }
      return results;
    };

    Highlight.prototype.hide = function() {
      var i, item, len, ref, results;
      this.isShow = false;
      ref = this.rects || [];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        results.push(item.remove());
      }
      return results;
    };

    Highlight.prototype.clear = function() {
      var i, len, rect, ref;
      ref = this.rects;
      for (i = 0, len = ref.length; i < len; i++) {
        rect = ref[i];
        rect.remove();
      }
      return this.rects.length = 0;
    };

    Highlight.prototype.destroy = function() {
      this.isDestroyed = true;
      this.startCursor.destroy();
      return this.endCursor.destroy();
    };

    Highlight.prototype.blink = function() {
      var i, len, rect, ref, results;
      ref = this.rects;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        rect = ref[i];
        results.push(rect.blink());
      }
      return results;
    };

    return Highlight;

  })();

  HighlightRect = (function() {
    function HighlightRect(buffer, rect, option1) {
      this.buffer = buffer;
      this.option = option1 != null ? option1 : {};
      this.el = document.createElement("div");
      this.el.style.zIndex = 10;
      this.rect = rect;
      this.top = rect.top;
      this.bottom = rect.bottom;
    }

    HighlightRect.prototype.setOption = function(option) {
      var prop;
      if (option == null) {
        option = {};
      }
      for (prop in option) {
        this.option[prop] = option[prop];
      }
      return this.render();
    };

    HighlightRect.prototype.blink = function() {
      this.el.classList.add("blink");
      return setTimeout((function(_this) {
        return function() {
          return _this.el.classList.remove("blink");
        };
      })(this), 200);
    };

    HighlightRect.prototype.render = function() {
      var rect;
      rect = this.rect;
      this.el.style.left = rect.left + "px";
      this.el.style.top = rect.top + "px";
      this.el.style.width = rect.width + "px";
      this.el.style.height = rect.height + "px";
      this.el.style.position = "absolute";
      if (this.option.customClass) {
        this.el.classList.add(this.option.customClass);
        return;
      }
      if (this.option.useBorder) {
        this.el.style.borderBottom = "2px solid " + this.option.color;
      } else {
        this.el.style.backgroundColor = this.option.color || "yellow";
      }
      return this.el.classList.add("com-global-highlight");
    };

    HighlightRect.prototype.show = function() {
      if (this.isShow) {
        return;
      }
      this.isShow = true;
      this.buffer.viewPort.el.appendChild(this.el);
      return this.render();
    };

    HighlightRect.prototype.remove = function() {
      if (!this.isShow) {
        return;
      }
      this.isShow = false;
      if (this.el.parentElement) {
        return this.el.parentElement.removeChild(this.el);
      }
    };

    return HighlightRect;

  })();

  ReflowProcedure = (function(superClass) {
    extend(ReflowProcedure, superClass);

    function ReflowProcedure(session) {
      this.session = session;
      ReflowProcedure.__super__.constructor.call(this);
    }

    ReflowProcedure.prototype.start = function() {
      return this.setState("init");
    };

    ReflowProcedure.prototype.atInit = function() {
      var bottom, height, top;
      top = this.session.buffer.UI.viewPort.scrollTop;
      height = this.session.buffer.UI.viewPort.offsetHeight;
      bottom = top + height;
      this.data.top = top;
      this.data.height = height;
      this.data.bottom = bottom;
      return this.setState("traverse");
    };

    ReflowProcedure.prototype.atTraverse = function(stale) {
      var begin, end, i, len, light, ref;
      ref = this.session.lights;
      for (i = 0, len = ref.length; i < len; i++) {
        light = ref[i];
        if (stale()) {
          return;
        }
        light.apply();
        begin = light.rects[0];
        end = light.rects[light.rects.length - 1];
        if (!begin || !end) {
          light.hide();
        } else if (begin.top >= this.data.bottom) {
          light.hide();
        } else if (end.bottom <= this.data.top) {
          light.hide();
        } else {
          light.show();
        }
      }
      return this.setState("done");
    };

    ReflowProcedure.prototype.atDone = function() {};

    return ReflowProcedure;

  })(Leaf.States);

  module.exports = Highlighter;

  Highlighter.HighlightSession = HighlightSession;

  Highlighter.Highlight = Highlight;

}).call(this);
