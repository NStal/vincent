// Generated by CoffeeScript 1.10.0
(function() {
  var Hotkey, HotkeyManager,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  HotkeyManager = (function() {
    function HotkeyManager(editor1) {
      this.editor = editor1;
      this.candidates = [];
      this.disables = [];
      this.isOSX = this.editor.platform.isMac();
      this.isLinux = this.editor.platform.isLinux();
      this.isWindows = this.editor.platform.isWindows();
      this.traces = null;
      HotkeyManager.isOSX = this.isOSX;
    }

    HotkeyManager.prototype.trace = function(name) {
      if (this.traces == null) {
        this.traces = [];
      }
      return this.traces.push(name);
    };

    HotkeyManager.prototype.debug = function() {
      return this.isDebug = true;
    };

    HotkeyManager.prototype.getHotkeyStatistics = function() {
      var can, i, len, ref, results;
      ref = this.candidates;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        can = ref[i];
        results.push({
          name: can.commandName || "(CODE)",
          keyString: can.keyString
        });
      }
      return results;
    };

    HotkeyManager.prototype.handleKeyEvent = function(event) {
      var i, item, ref, ref1, ref2;
      if (this.isDebug) {
        Logger.debug("Disables", this.disables);
      }
      ref = this.candidates;
      for (i = ref.length - 1; i >= 0; i += -1) {
        item = ref[i];
        if (item.type && (ref1 = item.type, indexOf.call(this.disables, ref1) >= 0)) {
          continue;
        }
        if (this.isDebug) {
          if (item.test(event)) {
            Logger.debug("test pass", item.commandName, item);
          } else {
            Logger.debug("no pass", item.commandName);
          }
        }
        if (this.traces && (ref2 = item.commandName, indexOf.call(this.traces, ref2) >= 0)) {
          Logger.debug("test", item.commandName);
          Logger.debug(event, item.keyString);
        }
        if (item.exec(event, this.editor)) {
          if (this.isDebug) {
            Logger.debug("exec finally", item.commandName, item);
          }
          if (typeof event.capture === "function") {
            event.capture();
          }
          return true;
        }
      }
      return false;
    };

    HotkeyManager.prototype.registerCommandHotkey = function() {
      var args, commandName, hk, keyString, match, prop, value;
      keyString = arguments[0], commandName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (typeof keyString === "object") {
        match = false;
        for (prop in keyString) {
          value = keyString[prop];
          if (prop === "win") {
            if (this.isWindows) {
              match = true;
              this.registerCommandHotkey.apply(this, [value, commandName].concat(slice.call(args)));
            }
          } else if (prop === "osx") {
            if (this.isOSX) {
              match = true;
              this.registerCommandHotkey.apply(this, [value, commandName].concat(slice.call(args)));
            }
          } else if (prop === "linux") {
            if (this.isLinux) {
              match = true;
              this.registerCommandHotkey.apply(this, [value, commandName].concat(slice.call(args)));
            }
          } else if (prop === "default") {
            if (!match) {
              this.registerCommandHotkey.apply(this, [value, commandName].concat(slice.call(args)));
            }
          }
        }
        return;
      }
      hk = new Hotkey(keyString, {
        description: this.editor.commands.getCommandDescription(commandName),
        handler: this.editor.conduct.bind(this.editor, commandName),
        commandName: commandName,
        args: args
      });
      return this.register(hk);
    };

    HotkeyManager.prototype.getCommandHotkey = function(command) {
      var cand, cmd, hks, i, len, ref;
      cmd = command.toLowerCase();
      hks = [];
      ref = this.candidates;
      for (i = 0, len = ref.length; i < len; i++) {
        cand = ref[i];
        if (cand.commandName === cmd) {
          hks.push(cand);
        }
      }
      return hks;
    };

    HotkeyManager.prototype.registerHotkey = function(keyString, handler) {
      return this.register(new Hotkey(keyString, handler));
    };

    HotkeyManager.prototype.register = function(hotkey) {
      if (!hotkey.isValid) {
        Logger.error("will to register a invalid hotkey", hotkey);
      }
      return this.candidates.push(hotkey);
    };

    HotkeyManager.prototype.enableAll = function() {
      return this.disables = [];
    };

    HotkeyManager.prototype.disableInput = function() {
      return this.disables.push("input");
    };

    HotkeyManager.prototype.disableBuffer = function() {
      return this.disables.push("buffer");
    };

    HotkeyManager.prototype.disableEditor = function() {
      return this.disables.push("editor");
    };

    return HotkeyManager;

  })();

  Hotkey = (function() {
    var keyStringReg, modifierReg;

    Hotkey.normalize = function(keyString) {
      return keyString.replace(/\s/g, "").replace(/>/g, "> ");
    };

    keyStringReg = /^(input:|buffer:|editor:)?((<[^<>]+>\s*)*)([a-z0-9A-Z]+)(\s*@down)?(\s*@up)?$/;

    modifierReg = /<([^<]+)>/gi;

    function Hotkey(keyString, handler1) {
      var keyName, matches, modifiers, ref, ref1, ref2, ref3, result;
      if (keyString == null) {
        keyString = "";
      }
      this.handler = handler1;
      matches = keyString.match(keyStringReg);
      this.isValid = true;
      if (!matches) {
        Logger.error("invalid hotkey string " + keyString);
        this.isValid = false;
        return;
      }
      this.commandName = this.handler.commandName;
      this.type = ((ref = matches[1]) != null ? ref.replace(":", "") : void 0) || "buffer";
      if ((ref1 = this.type) !== "buffer" && ref1 !== "editor" && ref1 !== "input") {
        Logger.error("invalid hotkey type", this.type);
        this.isValid = false;
        return false;
      }
      modifiers = matches[2];
      modifierReg.lastIndex = 0;
      while (result = modifierReg.exec(modifiers)) {
        keyName = (ref2 = result[1]) != null ? (ref3 = ref2.trim()) != null ? ref3.toLowerCase() : void 0 : void 0;
        if (keyName === "ctrl") {
          this.ctrlKey = true;
        }
        if (keyName === "alt") {
          this.altKey = true;
        }
        if (keyName === "shift") {
          this.shiftKey = true;
        }
        if (keyName === "meta") {
          this.metaKey = true;
        }
        if (keyName === "mod") {
          this.modKey = true;
        }
        if (keyName === "command") {
          this.commandKey = true;
        }
      }
      this.keyName = matches[4];
      this.keyDown = matches[5] && true || false;
      this.keyUp = matches[6] && true || false;
      if (!this.keyDown && !this.keyUp) {
        this.keyDown = true;
      }
      this.keyString = Hotkey.normalize(keyString);
      this.description = this.handler.description || "unkown hotkey description";
    }

    Hotkey.prototype.testKeyString = function(string) {
      var hk, i, len, name, prop;
      hk = new Hotkey(string, {});
      prop = ["keyName", "ctrlKey", "altKey", "metaKey", "shiftKey", "modKey", "commandKey", "keyUp", "keyDown"];
      for (i = 0, len = prop.length; i < len; i++) {
        name = prop[i];
        if (hk[name] !== this[name]) {
          return false;
        }
      }
      return true;
    };

    Hotkey.prototype.test = function(event) {
      var result;
      if (typeof event === "string") {
        return this.testKeyString(event);
      }
      result = false;
      if (event.isKey(this.keyName) && (event.shiftKey ^ this.shiftKey) === 0 && (event.altKey ^ this.altKey) === 0 && (event.keyUp ^ this.keyUp) === 0 && (event.keyDown ^ this.keyDown) === 0 && event.isModMatch(this.ctrlKey, this.commandKey, this.modKey)) {
        result = true;
      }
      return result;
    };

    Hotkey.prototype.exec = function(event, editor) {
      var ref, result, transact;
      if (!this.test(event)) {
        return false;
      }
      result = null;
      transact = ((ref = editor.context) != null ? ref.transact.bind(editor.context) : void 0) || (function(_this) {
        return function(handler) {
          return handler();
        };
      })(this);
      transact((function(_this) {
        return function() {
          return result = _this.invoke(editor, event);
        };
      })(this));
      return result;
    };

    Hotkey.prototype.invoke = function(editor, event) {
      var args, ref;
      if (typeof this.handler === "function") {
        args = this.args || [];
        return this.handler.apply(this, [editor].concat(slice.call(args)));
      } else if (typeof this.handler.handler === "function") {
        args = this.handler.args || this.args || [];
        return (ref = this.handler).handler.apply(ref, args);
      }
    };

    Hotkey.prototype.prettifyHTML = function() {
      var arr, command, ctrl, key, ks, map, mod, opt, shift, value;
      command = "⌘";
      if (HotkeyManager.isOSX) {
        mod = command;
        opt = "⌥";
        shift = "⇧";
        shift = "Shift";
        ctrl = "Ctrl";
      } else {
        mod = "Ctrl";
        opt = "Alt";
        shift = "Shift";
        ctrl = "Ctrl";
      }
      map = {
        "<mod>": mod,
        "<ctrl>": ctrl,
        "<alt>": opt,
        "<shift>": shift,
        "<command>": command,
        left: "←",
        right: "→",
        up: "↑",
        down: "↓",
        slash: "/",
        equal: "=",
        comma: ",",
        period: ".",
        escape: "esc"
      };
      ks = this.keyString;
      ks = ks.replace(/^.+:/, "");
      for (key in map) {
        value = map[key];
        ks = ks.replace(key, value);
      }
      arr = ks.split(/\s/).filter(function(item) {
        return item;
      });
      arr = arr.map(function(item) {
        return "<key>" + item[0].toUpperCase() + item.slice(1) + "</key>";
      });
      return arr.join("+");
    };

    Hotkey.prototype.prettify = function() {
      var arr, command, ctrl, key, ks, map, mod, opt, shift, value;
      command = "⌘";
      if (HotkeyManager.isOSX) {
        mod = command;
        opt = "⌥";
        shift = "⇧";
        shift = "Shift";
        ctrl = "Ctrl";
      } else {
        mod = "Ctrl";
        opt = "Alt";
        shift = "Shift";
        ctrl = "Ctrl";
      }
      map = {
        "<mod>": mod,
        "<ctrl>": ctrl,
        "<alt>": opt,
        "<shift>": shift,
        "<command>": command,
        left: "←",
        right: "→",
        up: "↑",
        down: "↓",
        slash: "/",
        equal: "=",
        comma: ",",
        period: ".",
        escape: "esc"
      };
      ks = this.keyString;
      ks = ks.replace(/^.+:/, "");
      for (key in map) {
        value = map[key];
        ks = ks.replace(key, value);
      }
      arr = ks.split(/\s/).filter(function(item) {
        return item;
      });
      arr = arr.map(function(item) {
        return item[0].toUpperCase() + item.slice(1);
      });
      return arr.join(" + ");
    };

    Hotkey.prototype.toString = function() {
      return "[Hotkey " + this.keyString + "]";
    };

    return Hotkey;

  })();

  module.exports = HotkeyManager;

  HotkeyManager.Hotkey = Hotkey;

}).call(this);
