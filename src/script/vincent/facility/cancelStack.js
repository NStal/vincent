// Generated by CoffeeScript 1.10.0
(function() {
  var CancelEvent, CancelStack,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CancelStack = (function(superClass) {
    extend(CancelStack, superClass);

    function CancelStack(editor) {
      this.editor = editor;
      CancelStack.__super__.constructor.call(this);
      this.stack = [];
      this.emptyHandlers = [];
      this.editor.commands.register({
        name: "cancel-stack-cancel-top",
        handler: (function(_this) {
          return function() {
            return _this.cancelTop();
          };
        })(this)
      });
      this.editor.hotkeys.registerCommandHotkey("editor:escape", "cancel-stack-cancel-top");
      this.historyHandler = this.historyHandler.bind(this);
    }

    CancelStack.prototype.handleEmpty = function() {
      var callback, e, i, len, ref;
      ref = this.emptyHandlers;
      for (i = 0, len = ref.length; i < len; i++) {
        callback = ref[i];
        callback(e = new CancelEvent);
        if (e.isCaptured) {
          return true;
        }
      }
      return false;
    };

    CancelStack.prototype.registerEmptyHandler = function(handlers) {
      return this.emptyHandlers.push(handlers);
    };

    CancelStack.prototype.bindHistory = function(history) {
      this.history = history;
      return this.registerHistory();
    };

    CancelStack.prototype.registerHistory = function() {
      if (!this.history) {
        return;
      }
      this.history.remove(this);
      return this.history.unshift(this, this.historyHandler);
    };

    CancelStack.prototype.historyHandler = function() {
      this.cancelTop();
      return this.registerHistory();
    };

    CancelStack.prototype.cancelTop = function() {
      var item;
      if (this.stack.length > 0) {
        item = this.stack.pop();
        item.callback();
        if (this.stack.length === 0) {
          this.emit("empty");
        }
        return true;
      } else if (this.handleEmpty()) {
        return true;
      } else {
        this.history.remove(this);
      }
      return false;
    };

    CancelStack.prototype.push = function(id, callback) {
      this.registerHistory();
      this.stack.push({
        id: id,
        callback: callback
      });
      if (this.stack.length === 1) {
        return this.emit("occupied");
      }
    };

    CancelStack.prototype.isEmpty = function() {
      return this.stack.length === 0;
    };

    CancelStack.prototype.remove = function(id) {
      var change;
      change = false;
      this.stack = this.stack.filter(function(item) {
        if (item.id === id) {
          change = true;
          return false;
        }
        return true;
      });
      if (this.stack.length === 0 && change) {
        return this.emit("empty");
      }
    };

    return CancelStack;

  })(Leaf.EventEmitter);

  CancelEvent = (function() {
    function CancelEvent() {}

    CancelEvent.prototype.capture = function() {
      return this.isCaptured = true;
    };

    return CancelEvent;

  })();

  module.exports = CancelStack;

}).call(this);
