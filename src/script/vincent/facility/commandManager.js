// Generated by CoffeeScript 1.10.0
(function() {
  var Buffer, CommandManager,
    slice = [].slice;

  Buffer = require("./buffer");

  CommandManager = (function() {
    function CommandManager(editor) {
      this.editor = editor;
      this.entries = {};
    }

    CommandManager.prototype.register = function(cmd) {
      if (!cmd) {
        Logger.error("register command request a object like {name,description,handler}");
        return false;
      }
      if (!cmd.name) {
        Logger.error("invalid command name provided");
        return false;
      }
      if (!cmd.handler) {
        Logger.error("invalid command handler provided");
        return false;
      }
      if (this.entries[cmd.name]) {
        Logger.error("duplicate command name " + cmd.name);
        return false;
      }
      this.entries[cmd.name] = {
        name: cmd.name,
        description: cmd.description,
        invoke: cmd.handler,
        option: cmd.option || null,
        global: cmd.global || false
      };
      return true;
    };

    CommandManager.prototype.conduct = function() {
      var args, cmd, name, ref, result, transact;
      name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      result = false;
      cmd = this.entries[name];
      if (!cmd) {
        return false;
      }
      if (cmd.context && (!this.editor.context || this.editor.context.isReadonly)) {
        return false;
      }
      transact = ((ref = this.editor.context) != null ? ref.transact.bind(this.editor.context) : void 0) || function(handler) {
        return handler();
      };
      transact((function(_this) {
        return function() {
          return result = cmd.invoke.apply(cmd, [_this.editor].concat(slice.call(args))) || false;
        };
      })(this));
      return result;
    };

    CommandManager.prototype.has = function(name) {
      return this.entries[name] && true || false;
    };

    CommandManager.prototype.getCommandDescription = function(name) {
      if (!this.has(name)) {
        return null;
      }
      return this.entries[name].description || ("<CMD " + name + "> has no description");
    };

    return CommandManager;

  })();

  module.exports = CommandManager;

}).call(this);
