// Generated by CoffeeScript 1.10.0
(function() {
  var DOMSelection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DOMSelection = (function(superClass) {
    extend(DOMSelection, superClass);

    function DOMSelection(editor) {
      this.editor = editor;
      DOMSelection.__super__.constructor.call(this);
      this.ranges = [];
    }

    DOMSelection.prototype.detect = function() {
      var selection;
      selection = window.getSelection();
      if (selection.isCollapsed) {
        return false;
      } else {
        return true;
      }
    };

    DOMSelection.prototype.use = function(who, range) {
      if (!range) {
        throw new Error("DOMSelection.use should provide a valid range");
      }
      return this.ranges.push({
        who: who,
        range: {
          startContainer: range.startContainer,
          startOffset: range.startOffset,
          endContainer: range.endContainer,
          endOffset: range.endOffset
        }
      });
    };

    DOMSelection.prototype.clear = function(who) {
      var length;
      length = this.ranges.length;
      if (length === 0) {
        return false;
      }
      this.ranges = this.ranges.filter(function(item) {
        return item.who !== who;
      });
      if (this.ranges.length === length) {
        return false;
      }
      if (!who) {
        return this.ranges = [];
      }
    };

    DOMSelection.prototype.disable = function() {
      return this.disabled = true;
    };

    DOMSelection.prototype.enable = function() {
      return this.disabled = false;
    };

    DOMSelection.prototype.render = function() {
      var i, item, len, range, ref, results, selection;
      if (this.disabled) {
        return;
      }
      if (this.ranges.length === 0 || (this.ranges.length === 1 && this.ranges[0].range.isCollapsed)) {
        if (this.hasFocus) {
          this.hasFocus = false;
          this.editor.focus.inputFocus.release(this);
        }
        return;
      }
      this.hasFocus = true;
      this.editor.focus.inputFocus.obtain(this);
      selection = window.getSelection();
      selection.removeAllRanges();
      return;
      ref = this.ranges;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        range = document.createRange();
        range.setStart(item.range.startContainer, item.range.startOffset);
        range.setEnd(item.range.endContainer, item.range.endOffset);
        results.push(selection.addRange(range));
      }
      return results;
    };

    return DOMSelection;

  })(Leaf.EventEmitter);

  module.exports = DOMSelection;

}).call(this);
