// Generated by CoffeeScript 1.10.0
(function() {
  var COMComposer, COMNamespace, Errors,
    slice = [].slice;

  Errors = require("./errors");

  COMComposer = require("./composer");

  COMNamespace = (function() {
    function COMNamespace() {
      this.creators = {};
      this.decorations = [];
      this.spells = [];
      return this;
    }

    COMNamespace.prototype.registerDecoration = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.decorations).push.apply(ref, args);
    };

    COMNamespace.prototype.registerSpell = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.spells).push.apply(ref, args);
    };

    COMNamespace.prototype.registerComposer = function(name, composer) {
      var target;
      if (name instanceof COMComposer) {
        composer = name;
        name = composer.type;
      }
      target = this.creators[name];
      if (!target) {
        Logger.debug(target, name, composer, "///");
        Logger.error("invalid composer target " + name);
        return false;
      }
      if (target.composers == null) {
        target.composers = [];
      }
      return target.composers.push(composer);
    };

    COMNamespace.prototype.initContext = function(context) {
      var base, ctr, name, ref, results;
      ref = this.creators;
      results = [];
      for (name in ref) {
        ctr = ref[name];
        results.push(typeof (base = ctr.creator).initContext === "function" ? base.initContext(context) : void 0);
      }
      return results;
    };

    COMNamespace.prototype.registerNode = function(creator) {
      if (!creator.prototype.type) {
        Logger.error("invalid creator without Ctor::type");
        return false;
      }
      if (this.creators[creator.prototype.type]) {
        Logger.error("fail to register creator " + creator.prototype.type + ",type conflict", creator);
        return false;
      }
      return this.creators[creator.prototype.type] = {
        type: creator.prototype.type,
        creator: creator
      };
    };

    COMNamespace.prototype.sortOf = function(a, type) {
      var creator, ref, ref1;
      creator = (ref = this.creators[type]) != null ? ref.creator : void 0;
      if (typeof a === "string") {
        a = (ref1 = this.creators[a]) != null ? ref1.creator : void 0;
        if (a) {
          return a.prototype instanceof creator || a === creator;
        } else {
          return false;
        }
      }
      return (typeof creator === "function") && a instanceof creator;
    };

    COMNamespace.prototype.create = function() {
      var args, context, result, target, type;
      context = arguments[0], type = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      target = this.creators[type];
      if (!target) {
        Logger.error("Unregistered Node type " + type);
        return null;
      }
      result = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(target.creator, [context].concat(slice.call(args)), function(){});
      return result;
    };

    COMNamespace.prototype.compose = function(target) {
      var Ctor, composer, composers, i, len, ref, result;
      if (!target.root || target.root !== ((ref = target.context) != null ? ref.root : void 0)) {
        return false;
      }
      Ctor = this.creators[target.type];
      if (!Ctor) {
        throw new Errors.LogicError("compose unregistered element " + target.type);
      }
      composers = Ctor.composers || [];
      if (window.perf == null) {
        window.perf = new Perf();
      }
      for (i = 0, len = composers.length; i < len; i++) {
        composer = composers[i];
        perf.start(composer.constructor.name);
        result = composer.compose(target);
        perf.end(composer.constructor.name);
        if (result) {
          return true;
        }
        if (!target.root) {
          Logger.error("composer should return true if it changes it's target");
          return true;
        }
      }
      return false;
    };

    COMNamespace.prototype.clone = function() {
      var ns, prop;
      ns = new COMNamespace();
      for (prop in this.creators) {
        ns.creators[prop] = this.creators[prop];
      }
      ns.spells = this.spells.slice();
      ns.decorations = this.decorations.slice();
      return ns;
    };

    return COMNamespace;

  })();

  module.exports = COMNamespace;

}).call(this);
