// Generated by CoffeeScript 1.10.0
(function() {
  var COMContainer, COMDecorationPolicy, COMRune, COMText, COMTrapPolicy, COMVisualPosition, Decoration, DraggableTrait, Trait,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  COMContainer = require("./container");

  COMTrapPolicy = require("./trapPolicy");

  COMDecorationPolicy = require("./decorationPolicy");

  Decoration = require("./decoration");

  Trait = require("./helper/trait");

  COMVisualPosition = require("./visualPosition");

  COMText = require("./text");

  COMRune = (function(superClass) {
    extend(COMRune, superClass);

    COMRune.RunePlaceBegin = "\uE1F5";

    COMRune.RunePlaceEnd = "\uE1F6";

    COMRune.RunePurifyHolder = "\uE1F7";

    COMRune.purifyContentString = function(string, option) {
      var replacement;
      if (option == null) {
        option = {};
      }
      replacement = " ";
      if (option.useHolder) {
        replacement = this.RunePurifyHolder;
      }
      return string.replace(new RegExp("\uE1F5[^\uE1F5\uE1F6]*\uE1F6", "g"), function(content) {
        return content.replace(/(?:.|\n)/ig, replacement);
      });
    };

    COMRune.prototype.type = "Rune";

    COMRune.prototype.isEmpty = function() {
      return false;
    };

    function COMRune(context, data) {
      this.context = context;
      this.data = data;
      COMRune.__super__.constructor.call(this, this.context, this.data);
      this.editor = this.context.editor;
      this.rightCaretPriority = 0;
      this.leftCaretPriority = 0;
      this.parentAppearance = [];
      this.decorations = [];
      this.trapPolicy = new COMTrapPolicy(this).behave({
        trap: "ignore"
      });
      this.decorationPolicy = new COMDecorationPolicy(this).behave({
        behavior: "singular"
      });
      this.context.runeCache.assign(this);
      this.__defineGetter__("length", function() {
        return this.cid.toString().length + 2;
      });
      this.__defineGetter__("contentString", function() {
        return COMRune.RunePlaceBegin + this.cid + COMRune.RunePlaceEnd;
      });
      this.triggerByClick = this.triggerByClick.bind(this);
      this.layout = "inline";
      new DraggableTrait(this);
    }

    COMRune.prototype.onRootDispel = function() {
      this.context.runeCache.release(this);
      return COMRune.__super__.onRootDispel.call(this);
    };

    COMRune.prototype.onRootAvailable = function() {
      this.context.runeCache.reuse(this);
      return COMRune.__super__.onRootAvailable.call(this);
    };

    COMRune.prototype.render = function(rc, option) {
      var dec, i, j, len, len1, ref, ref1;
      COMRune.__super__.render.call(this, rc, option);
      ref = this.previousDecorations || [];
      for (i = 0, len = ref.length; i < len; i++) {
        dec = ref[i];
        dec.cancel(this.el);
      }
      ref1 = this.decorations;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        dec = ref1[j];
        dec.apply(this.el);
      }
      return this.handleDragElement(this.el);
    };

    COMRune.prototype.triggerByClick = function(e) {
      if (this.trigger) {
        if (this.trigger()) {
          e.preventDefault();
          e.stopImmediatePropagation();
        }
      }
    };

    COMRune.prototype.toProtocolDatas = function() {
      return [
        {
          type: this.type,
          data: this
        }
      ];
    };

    COMRune.prototype.setDecorations = function(decorations) {
      var ref;
      if (this.previousDecorations == null) {
        this.previousDecorations = [];
      }
      (ref = this.previousDecorations).push.apply(ref, this.decorations || []);
      return this.context.operate(new Decoration.ChangeDecorationOperation(this.context, this, {
        decorations: decorations
      }));
    };

    COMRune.prototype.detectTextOffset = function(el) {
      if (this.el.contains(el || this.el === el)) {
        return {
          offset: 0,
          part: this.el
        };
      }
    };

    COMRune.prototype.getVisualBorder = function(offset, relativeToCursor) {
      var i, index, item, len, position, priority, ref, targetIndex;
      targetIndex = 0;
      ref = this.el.parentElement.childNodes;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        item = ref[index];
        if (item === this.el) {
          targetIndex = index;
          break;
        }
      }
      position = "left";
      if (offset === this.length || relativeToCursor === "left") {
        position = "right";
      }
      if (relativeToCursor === "inside") {
        position = "contain";
      }
      if (relativeToCursor === "right") {
        priority = this.leftCaretPriority || 0;
      } else if (relativeToCursor === "left") {
        priority = this.rightCaretPriority || 0;
      } else {
        priority = 0;
      }
      return new COMVisualPosition.COMVisualBorder({
        node: this.el.parentElement,
        offset: targetIndex,
        position: position,
        priority: priority
      });
    };

    COMRune.prototype.getCorrespondingBoundaryByOffset = function(offset, inside) {
      var i, index, item, len, ref, targetIndex;
      ref = this.el.parentElement.childNodes;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        item = ref[index];
        if (item === this.el) {
          targetIndex = index;
          break;
        }
      }
      if (offset === 0) {
        return {
          node: this.el.parentElement,
          offset: targetIndex,
          via: "RuneBefore"
        };
      } else if (offset < this.length || inside) {
        return {
          node: this.el,
          type: "include",
          via: "RuneInclude"
        };
      } else {
        return {
          node: this.el.parentElement,
          offset: targetIndex + 1,
          via: "RuneAfter"
        };
      }
      return null;
    };

    COMRune.prototype.slice = function() {
      return this.clone();
    };

    COMRune.prototype.clone = function() {
      return this.context.createElement(this.type, this.toJSON());
    };

    COMRune.prototype.insertText = function(start, value) {
      if (start === 0) {
        return this.before(new COMText(this.context, {
          contentString: value
        }));
      }
      if (start > 0) {
        return this.after(new COMText(this.context, {
          contentString: value
        }));
      }
      return false;
    };

    COMRune.prototype.toHumanString = function() {
      return "";
    };

    COMRune.prototype.removeText = function(start, length) {
      this.remove();
      return true;
    };

    COMRune.prototype.toHumanString = function() {
      return "<Rune " + this.type + ">";
    };

    return COMRune;

  })(COMContainer);

  DraggableTrait = (function(superClass) {
    extend(DraggableTrait, superClass);

    function DraggableTrait() {
      return DraggableTrait.__super__.constructor.apply(this, arguments);
    }

    DraggableTrait.prototype.enableDragBehavior = function(option) {
      if (option == null) {
        option = {};
      }
      if (this.dragBehaviorRegistered) {
        return;
      }
      this.dragBehaviorRegistered = true;
      return this.dragOption = option;
    };

    DraggableTrait.prototype.handleDragElement = function(el) {
      if (!this.dragBehaviorRegistered) {
        return;
      }
      if (el.runeDragAdded) {
        return;
      }
      el.runeDragAdded = true;
      el.dragSupport = "support";
      el.dragBehavior = "auto";
      return el.addEventListener("user-draginit", (function(_this) {
        return function(e) {
          var i, item, len, ref, ref1, results;
          ref = _this.getDragProtocols();
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            results.push((ref1 = e.detail) != null ? typeof ref1.addProtocol === "function" ? ref1.addProtocol(item.type, item.data) : void 0 : void 0);
          }
          return results;
        };
      })(this));
    };

    DraggableTrait.prototype.getDragProtocols = function() {
      var base, extra, result;
      result = [
        {
          type: "Rune",
          data: this
        }
      ];
      extra = (typeof (base = this.dragOption).getDragProtocol === "function" ? base.getDragProtocol(this) : void 0) || [];
      return extra.concat(result);
    };

    return DraggableTrait;

  })(Trait);

  module.exports = COMRune;

}).call(this);
