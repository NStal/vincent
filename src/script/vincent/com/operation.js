// Generated by CoffeeScript 1.10.0
(function() {
  var COMNode, ChangePropertyOperation, EditOperation, Errors, OpIndex, TreeOperation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Errors = require("./errors");

  COMNode = require("./node");

  OpIndex = 0;

  EditOperation = (function() {
    EditOperation.prototype.name = "VoidEditOperation";

    function EditOperation(context, target, option) {
      this.context = context;
      this.target = target;
      this.option = option != null ? option : {};
      this._index = OpIndex++;
      if (this.target instanceof COMNode) {
        this.path = this.target.getPath();
      } else if (this.target.type === "COMPath") {
        this.path = this.target;
        this.target = null;
      }
    }

    EditOperation.prototype.error = function(message, meta) {
      var error;
      error = new Errors.OperationError("Edit->" + this.name + " Error: " + message, meta);
      Logger.error(error, this);
      return error;
    };

    EditOperation.prototype.invoke = function() {};

    EditOperation.prototype.revoke = function() {};

    EditOperation.prototype.toJSON = function() {
      return {
        path: this.path,
        option: this.option
      };
    };

    EditOperation.prototype.describe = function() {
      return this.name;
    };

    return EditOperation;

  })();

  ChangePropertyOperation = (function(superClass) {
    extend(ChangePropertyOperation, superClass);

    ChangePropertyOperation.prototype.name = "ChangePropertyOperation";

    ChangePropertyOperation.prototype.describe = function() {
      return "change prop:" + JSON.stringify(this.option, null, 4);
    };

    function ChangePropertyOperation(context, target, option) {
      var base;
      this.context = context;
      this.target = target;
      this.option = option != null ? option : {};
      ChangePropertyOperation.__super__.constructor.call(this, this.context, this.target, this.option);
      if ((base = this.option).property == null) {
        base.property = {};
      }
    }

    ChangePropertyOperation.prototype.invoke = function() {
      var base, prop;
      if ((base = this.option).oldProperty == null) {
        base.oldProperty = {};
      }
      for (prop in this.option.property) {
        this.option.oldProperty[prop] = this.target[prop];
        this.target[prop] = this.option.property[prop];
      }
      return this.target.pend();
    };

    ChangePropertyOperation.prototype.revoke = function() {
      var prop;
      if (this.option.immutable) {
        return false;
      }
      for (prop in this.option.oldProperty) {
        this.target[prop] = this.option.oldProperty[prop];
      }
      return this.target.pend();
    };

    return ChangePropertyOperation;

  })(EditOperation);

  TreeOperation = (function() {
    TreeOperation.prototype.name = "TreeOperation";

    function TreeOperation(context, target, option) {
      this.context = context;
      this.target = target;
      this.option = option != null ? option : {};
      this.path = this.target.getPath();
      this._index = OpIndex++;
    }

    TreeOperation.prototype.error = function(message, meta) {
      var error;
      error = new Errors.OperationError("Tree->" + this.name + " Error: " + message, meta);
      Logger.error(error, this, this.describe());
      return error;
    };

    TreeOperation.prototype.toJSON = function() {
      return {
        path: this.path,
        option: this.option
      };
    };

    TreeOperation.prototype.describe = function() {
      return this.name;
    };

    return TreeOperation;

  })();

  exports.EditOperation = EditOperation;

  exports.TreeOperation = TreeOperation;

  exports.ChangePropertyOperation = ChangePropertyOperation;

}).call(this);
