// Generated by CoffeeScript 1.10.0
(function() {
  var COMComposer, COMContainer, COMRoot, RootAvoidEmpty,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  COMComposer = require("./composer");

  COMContainer = require("./container");

  COMRoot = (function(superClass) {
    extend(COMRoot, superClass);

    COMRoot.prototype.type = "Root";

    function COMRoot(context, data) {
      var ref;
      this.context = context;
      this.data = data;
      this.appearance = {
        tagName: "div",
        classList: ["com", "com-root"]
      };
      this.withContext = ((ref = this.data) != null ? ref.withContext : void 0) || false;
      this.isRoot = true;
      COMRoot.__super__.constructor.call(this, this.context);
      this.pend();
      this.root = this;
      this.fromJSON(this.data);
    }

    COMRoot.prototype.pend = function() {
      return COMRoot.__super__.pend.call(this);
    };

    COMRoot.prototype.contains = function(node) {
      return Util.topLevel(node) === this;
    };

    COMRoot.prototype.getChildByPath = function(path) {
      var index, node, routes;
      if (path == null) {
        path = null;
      }
      if (!path) {
        return null;
      }
      routes = path.getRoutes();
      if (routes.length === 0) {
        return this;
      }
      routes = routes.slice(0);
      node = this;
      while (true) {
        if (routes.length === 0) {
          return node;
        }
        index = routes.pop();
        if (node && node.children && node.children[index]) {
          node = node.children[index];
          continue;
        } else {
          return null;
        }
      }
    };

    COMRoot.prototype.render = function(rc) {
      COMRoot.__super__.render.call(this, rc, {
        recursive: true,
        selfless: true
      });
      rc.el = this.el;
      this.afterRender();
      if (!this.rc.interactive) {
        return this.el.classList.add("readonly");
      } else {
        return this.el.classList.remove("readonly");
      }
    };

    COMRoot.prototype._attach = function(node) {
      COMRoot.__super__._attach.call(this, node);
      return node.root = this;
    };

    COMRoot.prototype.toJSON = function(option) {
      var json;
      json = COMRoot.__super__.toJSON.call(this, option);
      if (!json) {
        return null;
      }
      json.type = "Root";
      return json;
    };

    COMRoot.prototype.fromJSON = function(json) {
      var result;
      if (json == null) {
        json = {};
      }
      if (json.type !== "Root") {
        return;
      }
      result = COMRoot.__super__.fromJSON.call(this, json);
      return result;
    };

    return COMRoot;

  })(COMContainer);

  RootAvoidEmpty = (function(superClass) {
    extend(RootAvoidEmpty, superClass);

    function RootAvoidEmpty() {
      return RootAvoidEmpty.__super__.constructor.apply(this, arguments);
    }

    RootAvoidEmpty.prototype.type = "Root";

    RootAvoidEmpty.prototype.exec = function() {
      var ct, ref;
      if (((ref = this.target.children) != null ? ref.length : void 0) > 0) {
        return false;
      }
      ct = this.context.createElement("Contents", {
        children: [
          this.context.createElement("RichText", {
            contentString: ""
          })
        ]
      });
      this.target.append(ct);
      return true;
    };

    return RootAvoidEmpty;

  })(COMComposer);

  COMRoot.RootAvoidEmpty = RootAvoidEmpty;

  module.exports = COMRoot;

}).call(this);
