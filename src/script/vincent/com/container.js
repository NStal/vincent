// Generated by CoffeeScript 1.10.0
(function() {
  var AppendChildOperation, COMAnchor, COMContainer, COMNode, COMPath, EmptyOperation, Errors, InsertOperation, Operation, RemoveChildOperation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice1 = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  COMNode = require("./node");

  COMPath = require("./path");

  Operation = require("./operation");

  COMAnchor = require("./anchor");

  Errors = require("./errors");

  COMContainer = (function(superClass) {
    extend(COMContainer, superClass);

    COMContainer.prototype.type = "Container";

    function COMContainer(context, option) {
      this.context = context;
      if (option == null) {
        option = {};
      }
      this.children = [];
      COMContainer.__super__.constructor.call(this, this.context, option);
      this.fromJSON(option);
      this.__defineGetter__("domContainer", (function(_this) {
        return function() {
          var ref;
          return ((ref = _this.cache) != null ? ref.domContainer : void 0) || null;
        };
      })(this));
      this.__defineSetter__("domContainer", (function(_this) {
        return function(domContainer) {
          if (domContainer != null) {
            domContainer.com = _this;
          }
          return _this.cache.domContainer = domContainer;
        };
      })(this));
    }

    COMContainer.prototype.onRootDispel = function() {
      var child, i, len, ref, results1;
      COMContainer.__super__.onRootDispel.call(this);
      ref = this.children;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        results1.push(child.root = null);
      }
      return results1;
    };

    COMContainer.prototype.onRootAvailable = function() {
      var child, i, len, ref, results1;
      COMContainer.__super__.onRootAvailable.call(this);
      ref = this.children;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        results1.push(child.root = this.root);
      }
      return results1;
    };

    COMContainer.prototype.setRenderContext = function(rc) {
      var child, i, len, ref, results1;
      if (rc === this.rc) {
        return;
      }
      COMContainer.__super__.setRenderContext.call(this, rc);
      ref = this.children;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        results1.push(child.setRenderContext(rc));
      }
      return results1;
    };

    COMContainer.prototype.cacheIndex = function() {
      var i, index, item, len, ref;
      ref = this.children;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        item = ref[index];
        item._containerIndex = index;
      }
      this._indexCached = true;
      return this._indexCached;
    };

    COMContainer.prototype.some = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return (ref = this.children).some.apply(ref, args);
    };

    COMContainer.prototype.every = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return (ref = this.children).every.apply(ref, args);
    };

    COMContainer.prototype.render = function(rc, option) {
      var child, extraAppearance, frag, i, item, j, k, l, len, len1, len2, len3, rearrange, recursive, ref, ref1, ref2, ref3, ref4, selfless;
      if (option == null) {
        option = {};
      }
      if (!this.dirty) {
        return;
      }
      recursive = option.recursive;
      selfless = option.selfless && this.el && this.el.children.length > 0;
      rearrange = !selfless || this.beforeMark("rearrange");
      if (rearrange) {
        COMContainer.__super__.render.call(this, rc, {
          force: true
        });
        this.specifyDomContainer();
        if (!this.domContainer) {
          this.domContainer = this.el;
        }
        frag = document.createDocumentFragment();
      } else {
        COMContainer.__super__.render.call(this, rc);
        this.specifyDomContainer();
        if (!this.domContainer) {
          this.domContainer = this.el;
        }
      }
      extraAppearance = [];
      ref = this.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        if (((ref1 = child.parentAppearance) != null ? ref1.length : void 0) > 0) {
          ref2 = child.parentAppearance;
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            item = ref2[j];
            if (indexOf.call(extraAppearance, item) < 0) {
              extraAppearance.push(item);
            }
          }
        }
        if (recursive && (child.dirty || !child.el || option.force)) {
          child.render(rc, option);
          child.afterRender();
        }
        if (rearrange) {
          if (!child.el) {
            Logger.error(child, "has no el of", this, child.type, child._id, this.type, this._id);
          }
          if (child.elBefore) {
            frag.appendChild(child.elBefore);
          }
          frag.appendChild(child.el);
          if (child.elAfter) {
            frag.appendChild(child.elAfter);
          }
        }
      }
      ref4 = ((ref3 = this.cache) != null ? ref3.extraAppearance : void 0) || [];
      for (k = 0, len2 = ref4.length; k < len2; k++) {
        item = ref4[k];
        this.el.classList.remove(item);
      }
      for (l = 0, len3 = extraAppearance.length; l < len3; l++) {
        item = extraAppearance[l];
        this.el.classList.add(item);
      }
      this.cache.extraAppearance = extraAppearance;
      if (rearrange) {
        if (this.domContainer !== this.el) {
          this.domContainer.innerHTML = "";
        }
        return this.domContainer.appendChild(frag);
      }
    };

    COMContainer.prototype.specifyDomContainer = function() {
      this.domContainer = this.el;
    };

    COMContainer.prototype._attach = function(node) {
      if (node.parent) {
        throw new Errors.LogicError("can't attach a node to container that is not orphan");
      }
      node.parent = this;
      node.root = this.root;
      this.pend();
      this.setRevisionMark("rearrange");
      this.setRevisionMark("hasAttachedChild");
      return node.listenBy(this, "pend", (function(_this) {
        return function() {
          return _this.pend();
        };
      })(this));
    };

    COMContainer.prototype._detach = function(node) {
      if (node.parent !== this) {
        throw new Errors.LogicError("can't detach node without being it's parent");
      }
      node.parent = null;
      node.root = null;
      node.stopListenBy(this);
      this.pend();
      this.setRevisionMark("hasDetachedChild");
      return this.setRevisionMark("rearrange");
    };

    COMContainer.prototype.last = function() {
      return this.children[this.children.length - 1] || null;
    };

    COMContainer.prototype.child = function(index) {
      return this.children[index] || null;
    };

    COMContainer.prototype.indexOf = function(node) {
      if (node.parent !== this) {
        return -1;
      }
      if (this._indexCached) {
        return node._containerIndex;
      }
      return this.children.indexOf(node);
    };

    COMContainer.prototype.contains = function(node) {
      var child, i, j, len, len1, ref, ref1;
      ref = this.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        if (child === node) {
          return true;
        }
      }
      ref1 = this.children;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        child = ref1[j];
        if (child.contains && child.contains(node)) {
          return true;
        }
      }
      return false;
    };

    COMContainer.prototype.removeChild = function(node) {
      var index;
      if (typeof node === "number") {
        index = node;
      } else if (node.parent !== this) {
        return false;
      } else {
        index = this.indexOf(node);
      }
      if (index < 0) {
        return false;
      }
      return this.context.operate(new RemoveChildOperation(this.context, this, {
        index: index
      }));
    };

    COMContainer.prototype.removeChildren = function(children) {
      var child, i, len, results1;
      results1 = [];
      for (i = 0, len = children.length; i < len; i++) {
        child = children[i];
        results1.push(this.removeChild(child));
      }
      return results1;
    };

    COMContainer.prototype.insert = function() {
      var index, nodes;
      index = arguments[0], nodes = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
      return this.context.operate(new InsertOperation(this.context, this, {
        index: index,
        children: nodes
      }));
    };

    COMContainer.prototype.append = function() {
      var nodes;
      nodes = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return this.context.operate(new AppendChildOperation(this.context, this, {
        children: nodes
      }));
    };

    COMContainer.prototype.empty = function() {
      if (this.children.length === 0) {
        return true;
      }
      return this.context.operate(new EmptyOperation(this.context, this, {}));
    };

    COMContainer.prototype.clone = function() {
      var clone, i, item, len, ref;
      clone = this.context.createElement(this.type);
      ref = this.children;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        clone.append(item.clone());
      }
      return clone;
    };

    COMContainer.prototype.pend = function() {
      this._indexCached = false;
      return COMContainer.__super__.pend.call(this);
    };

    COMContainer.prototype.compose = function() {
      this.cacheIndex();
      return COMContainer.__super__.compose.call(this);
    };

    COMContainer.prototype.slice = function(option) {
      var child, clone, i, isPartial, item, j, k, left, len, len1, len2, ref, ref1, results, right, slice;
      if (option == null) {
        option = {};
      }
      if ((!option.left || ((ref = option.left) != null ? ref.leftMost : void 0)) && (!option.right || option.right.rightMost)) {
        return this.clone();
      }
      if (option.left instanceof COMAnchor) {
        left = option.left;
      } else {
        left = {
          leftMost: true
        };
      }
      if (option.right instanceof COMAnchor) {
        right = option.right;
      } else {
        right = {
          rightMost: true
        };
      }
      results = [];
      ref1 = this.children;
      for (i = 0, len = ref1.length; i < len; i++) {
        child = ref1[i];
        slice = child.slice(option);
        if (!slice) {
          continue;
        }
        results.push(slice);
      }
      if (results.length === 0 && this.children.length !== 0) {
        return null;
      }
      isPartial = false;
      for (j = 0, len1 = results.length; j < len1; j++) {
        child = results[j];
        if (child.isPartial) {
          isPartial = true;
          break;
        }
      }
      clone = this.context.createElement(this.type);
      for (k = 0, len2 = results.length; k < len2; k++) {
        item = results[k];
        clone.append(item);
      }
      clone.isPartial = isPartial;
      return clone;
    };

    COMContainer.prototype.toPlainString = function() {
      var i, item, len, ref, results;
      results = [];
      ref = this.children;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        results.push(item.toPlainString());
      }
      return results.join("");
    };

    COMContainer.prototype.toHumanString = function() {
      var i, item, len, ref, results;
      results = [];
      ref = this.children;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        results.push(item.toHumanString());
      }
      return results.join("");
    };

    COMContainer.prototype.toJSON = function() {
      var item, result;
      result = COMContainer.__super__.toJSON.call(this);
      result.children = ((function() {
        var i, len, ref, results1;
        ref = this.children;
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results1.push(item.toJSON());
        }
        return results1;
      }).call(this)).filter(function(item) {
        return item;
      });
      if (result.children.length === 0) {
        delete result.children;
      }
      return result;
    };

    COMContainer.prototype.fromJSON = function(option) {
      var child, i, len, node, ref, results1;
      if (option.children && option.children.length > 0) {
        this.empty();
        ref = option.children;
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          if (!child) {
            continue;
          }
          node = this.context.createElement(child);
          if (node) {
            results1.push(this.append(node));
          } else {
            results1.push(Logger.error("invalid json", child));
          }
        }
        return results1;
      }
    };

    return COMContainer;

  })(COMNode);

  AppendChildOperation = (function(superClass) {
    extend(AppendChildOperation, superClass);

    function AppendChildOperation() {
      return AppendChildOperation.__super__.constructor.apply(this, arguments);
    }

    AppendChildOperation.prototype.name = "AppendChildOperation";

    AppendChildOperation.prototype.invoke = function() {
      var child, i, len, ref, target;
      target = this.target || this.context.root.getChildByPath(this.path);
      if (!(target instanceof COMContainer)) {
        this.error("require a Container node to perform the action");
        return false;
      }
      if (!this.option.children) {
        this.error("request children to append");
        return false;
      }
      this.option.at = target.children.length;
      ref = this.option.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        child = child instanceof COMNode && child || this.context.createElement(child);
        target.children.push(child);
        target._attach(child);
      }
      return true;
    };

    AppendChildOperation.prototype.revoke = function() {
      var child, i, len, result, results1, target;
      target = this.target || this.context.root.getChildByPath(this.path);
      if (!(target instanceof COMContainer)) {
        this.error("require a Container node to perform the action");
        return false;
      }
      if (this.option.at + this.option.children.length !== target.children.length) {
        this.error("revoke with target of children length " + target.children.length + " does't match the invoke result");
        return false;
      }
      result = target.children.splice(this.option.at, this.option.children.length);
      results1 = [];
      for (i = 0, len = result.length; i < len; i++) {
        child = result[i];
        results1.push(target._detach(child));
      }
      return results1;
    };

    return AppendChildOperation;

  })(Operation.TreeOperation);

  EmptyOperation = (function(superClass) {
    extend(EmptyOperation, superClass);

    function EmptyOperation() {
      return EmptyOperation.__super__.constructor.apply(this, arguments);
    }

    EmptyOperation.prototype.name = "EmptyOperation";

    EmptyOperation.prototype.invoke = function() {
      var i, item, len, ref, target;
      target = this.target || this.context.root.getChildByPath(this.path);
      if (!(target instanceof COMContainer)) {
        this.error("require a Container node to perform the action");
        return false;
      }
      this.option.children = target.children.slice();
      target.children.length = 0;
      ref = this.option.children;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        target._detach(item);
      }
      return true;
    };

    EmptyOperation.prototype.revoke = function() {
      var i, item, len, ref, target;
      target = this.target || this.context.root.getChildByPath(this.path);
      if (!(target instanceof COMContainer)) {
        this.error("require a Container node to perform the action");
        return false;
      }
      if (target.children.length !== 0) {
        this.error("revoke with container chidlren.length " + target.children.length + " isnt 0");
      }
      ref = this.option.children;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        target.children.push(item);
        target._attach(item);
      }
      return true;
    };

    return EmptyOperation;

  })(Operation.TreeOperation);

  InsertOperation = (function(superClass) {
    extend(InsertOperation, superClass);

    function InsertOperation() {
      return InsertOperation.__super__.constructor.apply(this, arguments);
    }

    InsertOperation.prototype.name = "InsertOperation";

    InsertOperation.prototype.invoke = function() {
      var i, insertion, item, len, ref, target;
      if (!this.option.children || !(this.option.children.length > 0)) {
        this.error("insert without children provided");
      }
      target = this.target || this.context.root.getChildByPath(this.path);
      if (!(target instanceof COMContainer)) {
        this.error("require a Container node to perform the action");
        return false;
      }
      if (target.children.length < this.option.index) {
        this.error("container children.length is " + target.children.length + " less than the insert index " + this.option.index);
        return false;
      }
      insertion = this.option.children.map((function(_this) {
        return function(item) {
          if (item instanceof COMNode) {
            return item;
          }
          return _this.context.createElement(item);
        };
      })(this));
      (ref = target.children).splice.apply(ref, [this.option.index, 0].concat(slice1.call(insertion)));
      for (i = 0, len = insertion.length; i < len; i++) {
        item = insertion[i];
        target._attach(item);
      }
      return true;
    };

    InsertOperation.prototype.revoke = function() {
      var child, children, i, len, target;
      target = this.target || this.context.root.getChildByPath(this.path);
      if (!(target instanceof COMContainer)) {
        this.error("require a Container node to perform the action");
        return false;
      }
      children = target.children.splice(this.option.index, this.option.children.length);
      for (i = 0, len = children.length; i < len; i++) {
        child = children[i];
        target._detach(child);
      }
      return true;
    };

    return InsertOperation;

  })(Operation.TreeOperation);

  RemoveChildOperation = (function(superClass) {
    extend(RemoveChildOperation, superClass);

    function RemoveChildOperation() {
      return RemoveChildOperation.__super__.constructor.apply(this, arguments);
    }

    RemoveChildOperation.prototype.name = "RemoveChildOperation";

    RemoveChildOperation.prototype.invoke = function() {
      var child, i, len, ref, target;
      if (!this.option.length) {
        this.option.length = 1;
      }
      target = this.target || this.context.root.getChildByPath(this.path);
      if (!(target instanceof COMContainer)) {
        this.error("require a Container node to perform the action");
        return false;
      }
      if (target.children.length <= this.option.index) {
        this.error("container children.length is " + target.children.length + " less than the required index " + this.option.index);
        return false;
      }
      this.option.children = target.children.splice(this.option.index, this.option.length);
      ref = this.option.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        target._detach(child);
      }
      return true;
    };

    RemoveChildOperation.prototype.revoke = function() {
      var child, i, len, ref, ref1, target;
      target = this.target || this.context.root.getChildByPath(this.path);
      if (!(target instanceof COMContainer)) {
        this.error("require a Container node to perform the action");
        return false;
      }
      if (target.children.length < this.option.index) {
        this.error("revoke container children.length is " + target.children.length + " less than the required index " + this.option.index);
        return false;
      }
      (ref = target.children).splice.apply(ref, [this.option.index, 0].concat(slice1.call(this.option.children)));
      ref1 = this.option.children;
      for (i = 0, len = ref1.length; i < len; i++) {
        child = ref1[i];
        target._attach(child);
      }
      return true;
    };

    return RemoveChildOperation;

  })(Operation.TreeOperation);

  module.exports = COMContainer;

}).call(this);
