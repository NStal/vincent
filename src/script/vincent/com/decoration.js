// Generated by CoffeeScript 1.10.0
(function() {
  var Decoration, DecorationMaintainer, MID, Operation, RegExpDecorationMaintainer, exports,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Operation = require("./operation");

  DecorationMaintainer = (function() {
    function DecorationMaintainer() {}

    DecorationMaintainer.prototype.compute = function() {
      return [];
    };

    DecorationMaintainer.prototype.apply = function() {};

    return DecorationMaintainer;

  })();

  RegExpDecorationMaintainer = (function(superClass) {
    extend(RegExpDecorationMaintainer, superClass);

    function RegExpDecorationMaintainer() {
      RegExpDecorationMaintainer.__super__.constructor.call(this);
      if (this.reg == null) {
        this.reg = null;
      }
      if (this.classes == null) {
        this.classes = [];
      }
      if (this.option == null) {
        this.option = {};
      }
      this.parts = this.option.parts || [];
    }

    RegExpDecorationMaintainer.prototype.getMatchRegion = function(contentString) {
      var backwardFix, forwardFix, match, ref, ref1, results;
      if (!this.reg) {
        return;
      }
      this.reg.lastIndex = 0;
      results = [];
      backwardFix = ((ref = this.option.backwardAssert) != null ? ref.length : void 0) || 0;
      forwardFix = ((ref1 = this.option.forwardAssert) != null ? ref1.length : void 0) || 0;
      while (match = this.reg.exec(contentString)) {
        if (match[0].length === 0) {
          break;
        }
        results.push([match.index + backwardFix, match.index + match[0].length - forwardFix, match[0], match]);
      }
      return results;
    };

    RegExpDecorationMaintainer.prototype.compute = function(contentString) {
      var content, coreResults, i, item, len, results;
      results = [];
      coreResults = (typeof this.getMatchRegion === "function" ? this.getMatchRegion(contentString) : void 0) || [];
      for (i = 0, len = coreResults.length; i < len; i++) {
        item = coreResults[i];
        if (this.parts.length > 0) {
          content = contentString.slice(item[0], item[1]);
          results.push.apply(results, this.computePart(content, item[0]));
        }
        results.push(item);
      }
      return results.map((function(_this) {
        return function(info) {
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(Decoration, [_this].concat(slice.call(info)), function(){});
        };
      })(this));
    };

    RegExpDecorationMaintainer.prototype.apply = function(dec, el) {
      var ref, ref1, ref2, ref3;
      (ref = el.classList).add.apply(ref, this.classes);
      if ((ref1 = dec.detail) != null ? ref1.classes : void 0) {
        return (ref3 = el.classList).add.apply(ref3, (ref2 = dec.detail) != null ? ref2.classes : void 0);
      }
    };

    RegExpDecorationMaintainer.prototype.cancel = function(dec, el) {
      var i, j, len, len1, name, ref, ref1, ref2, ref3, results1;
      ref = this.classes;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        el.classList.remove(name);
      }
      if ((ref1 = dec.detail) != null ? ref1.classes : void 0) {
        ref3 = (ref2 = dec.detail) != null ? ref2.classes : void 0;
        results1 = [];
        for (j = 0, len1 = ref3.length; j < len1; j++) {
          name = ref3[j];
          results1.push(el.classList.remove(name));
        }
        return results1;
      }
    };

    RegExpDecorationMaintainer.prototype.computePart = function(content, offset) {
      var i, len, match, part, ref, results;
      results = [];
      ref = this.parts;
      for (i = 0, len = ref.length; i < len; i++) {
        part = ref[i];
        part.reg.lastIndex = 0;
        while (match = part.reg.exec(content)) {
          if (match[0].length === 0) {
            break;
          }
          results.push([match.index + offset, match.index + offset + match[0].length, part]);
        }
      }
      return results;
    };

    return RegExpDecorationMaintainer;

  })(DecorationMaintainer);

  Decoration = (function() {
    function Decoration(maintainer, start1, end1, detail) {
      var ref;
      this.maintainer = maintainer;
      this.start = start1 != null ? start1 : 0;
      this.end = end1 != null ? end1 : 0;
      this.detail = detail;
      this.length = this.end - this.start;
      this.mid = (ref = this.maintainer) != null ? ref.id : void 0;
    }

    Decoration.prototype.apply = function(el) {
      return this.maintainer.apply(this, el);
    };

    Decoration.prototype.cancel = function(el) {
      return this.maintainer.cancel(this, el);
    };

    Decoration.prototype.clone = function() {
      return new Decoration(this.maintainer, this.start, this.end, this.detail);
    };

    Decoration.prototype.split = function(index) {
      var next;
      next = this.clone();
      next.start = index;
      this.end = index;
      this.length = this.end - this.start;
      return next;
    };

    Decoration.prototype.shift = function(unit) {
      this.start += unit;
      this.end += unit;
      return this;
    };

    Decoration.prototype.equal = function(target) {
      return target.mid === this.mid && target.start === this.start && target.end === this.end;
    };

    return Decoration;

  })();

  Decoration.PairDecorationMaintainer = (function(superClass) {
    extend(PairDecorationMaintainer, superClass);

    function PairDecorationMaintainer() {
      PairDecorationMaintainer.__super__.constructor.call(this);
      this.rules = [];
    }

    PairDecorationMaintainer.prototype.compute = function(cs) {
      var breakChar, char, close, i, index, item, j, len, ref, ref1, ref2, rule, start;
      this.results = [];
      this.stack = [];
      this.offset = 0;
      this.enterCount = 0;
      breakChar = "\uE1F8";
      while (this.offset < cs.length) {
        close = false;
        start = false;
        char = cs[this.offset];
        if (char === breakChar) {
          this.offset += 1;
          this.stack.length = 0;
          continue;
        }
        if (char === "\n") {
          this.enterCount += 1;
          this.offset += 1;
          if (this.enterCount >= 1) {
            this.enterCount = 0;
            this.stack.length = 0;
          }
          continue;
        } else {
          this.enterCount = 0;
        }
        ref = this.stack;
        for (index = i = ref.length - 1; i >= 0; index = i += -1) {
          item = ref[index];
          if (this.strcmp(cs, this.offset, item.right)) {
            this.stack.length = index;
            this.offset += item.right.length;
            item.end = this.offset;
            if (item.end - item.start === item.left.length + item.right.length) {
              continue;
              item.empty = true;
            }
            (ref1 = this.results).push.apply(ref1, this.createMatchingDecoration(cs, item));
            close = true;
            break;
          }
        }
        if (close) {
          continue;
        }
        ref2 = this.rules;
        for (j = 0, len = ref2.length; j < len; j++) {
          rule = ref2[j];
          if (this.strcmp(cs, this.offset, rule.left)) {
            this.stack.push({
              start: this.offset,
              rule: rule,
              right: rule.right,
              left: rule.left
            });
            this.offset += rule.left.length;
            start = true;
            break;
          }
        }
        if (start) {
          continue;
        }
        this.offset += 1;
      }
      return this.results;
    };

    PairDecorationMaintainer.prototype.strcmp = function(string, offset, match) {
      var char, i, index, len;
      if (match.length === 0) {
        return false;
      }
      for (index = i = 0, len = match.length; i < len; index = ++i) {
        char = match[index];
        if (string[offset + index] !== char) {
          return false;
        }
      }
      return true;
    };

    PairDecorationMaintainer.prototype.createMatchingDecoration = function(cs, result) {
      var l1, l2, rule;
      l1 = result.left.length;
      l2 = result.right.length;
      rule = result.rule;
      return [
        new Decoration.PairDecoration(this, result.start, result.start + l1, {
          rule: rule,
          isStart: true,
          empty: result.empty
        }), new Decoration.PairDecoration(this, result.start + l1, result.end - l2, {
          rule: rule,
          empty: result.empty
        }), new Decoration.PairDecoration(this, result.end - l2, result.end, {
          rule: rule,
          isEnd: true,
          empty: result.empty
        })
      ];
    };

    PairDecorationMaintainer.prototype.register = function(left, right, info) {
      var index, rid;
      if (info == null) {
        info = {};
      }
      rid = Decoration.allocateId();
      index = this.rules.length;
      return this.rules.push({
        left: left,
        right: right,
        rid: rid,
        index: index,
        info: info
      });
    };

    return PairDecorationMaintainer;

  })(DecorationMaintainer);

  Decoration.PairDecoration = (function(superClass) {
    extend(PairDecoration, superClass);

    function PairDecoration() {
      return PairDecoration.__super__.constructor.apply(this, arguments);
    }

    PairDecoration.prototype.clone = function() {
      return new Decoration.PairDecoration(this.maintainer, this.start, this.end, this.detail);
    };

    PairDecoration.prototype.apply = function(el) {
      var className, end, i, len, ref, start;
      ref = this.detail.rule.info.classNames || [];
      for (i = 0, len = ref.length; i < len; i++) {
        className = ref[i];
        el.classList.add(className);
      }
      if (this.detail.empty) {
        el.classList.add("com-dec-empty");
      }
      if (this.detail.isStart) {
        if (start = this.detail.rule.startDecorator) {
          return el.classList.add(start);
        } else {
          return el.classList.add("com-dec-pair-start");
        }
      } else if (this.detail.isEnd) {
        if (end = this.detail.rule.endDecorator) {
          return el.classList.add(end);
        } else {
          return el.classList.add("com-dec-pair-end");
        }
      }
    };

    PairDecoration.prototype.cancel = function(el) {
      var className, i, len, ref, results1;
      if (this.detail.empty) {
        el.classList.remove("com-dec-empty");
      }
      ref = this.detail.rule.info.classNames || [];
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        className = ref[i];
        results1.push(el.classList.remove(className));
      }
      return results1;
    };

    PairDecoration.prototype.equal = function(target) {
      var ref, ref1;
      return this.detail.rule.rid === (target != null ? (ref = target.detail) != null ? (ref1 = ref.rule) != null ? ref1.rid : void 0 : void 0 : void 0) && target.start === this.start && target.end === this.end;
    };

    return PairDecoration;

  })(Decoration);

  Decoration.ChangeDecorationOperation = (function(superClass) {
    extend(ChangeDecorationOperation, superClass);

    function ChangeDecorationOperation() {
      return ChangeDecorationOperation.__super__.constructor.apply(this, arguments);
    }

    ChangeDecorationOperation.prototype.name = "ChangeDecorationOperation";

    ChangeDecorationOperation.prototype.invoke = function() {
      var ref, ref1, ref2, text;
      text = this.target;
      this.option.oldDecorations = ((ref = text.decorations) != null ? typeof ref.slice === "function" ? ref.slice() : void 0 : void 0) || [];
      text.decorations = ((ref1 = this.option.decorations) != null ? typeof ref1.slice === "function" ? ref1.slice() : void 0 : void 0) || [];
      text.dirty = true;
      if ((ref2 = text.parent) != null) {
        ref2.dirty = true;
      }
      return true;
    };

    ChangeDecorationOperation.prototype.revoke = function() {
      var ref, ref1, text;
      text = this.target;
      text.decorations = ((ref = this.option.oldDecorations) != null ? typeof ref.slice === "function" ? ref.slice() : void 0 : void 0) || [];
      text.dirty = true;
      return (ref1 = text.parent) != null ? ref1.dirty = true : void 0;
    };

    ChangeDecorationOperation.prototype.describe = function() {
      return "make a decoration change to " + this.target.type;
    };

    return ChangeDecorationOperation;

  })(Operation.EditOperation);

  exports = Decoration;

  exports.DecorationMaintainer = DecorationMaintainer;

  MID = 0;

  exports.createRegExpMaintainer = function(name, reg, classes, option) {
    var CustomDecoratioMaintainer, Maintainer;
    if (option == null) {
      option = {};
    }
    Maintainer = CustomDecoratioMaintainer = (function(superClass) {
      extend(CustomDecoratioMaintainer, superClass);

      function CustomDecoratioMaintainer() {
        this.option = option || {};
        this.reg = reg;
        this.name = name;
        CustomDecoratioMaintainer.__super__.constructor.call(this);
      }

      return CustomDecoratioMaintainer;

    })(RegExpDecorationMaintainer);
    Maintainer.prototype.id = MID++;
    Maintainer.prototype.name = name;
    Maintainer.prototype.classes = classes;
    return Maintainer;
  };

  exports.allocateId = function() {
    return MID++;
  };

  module.exports = exports;

}).call(this);
