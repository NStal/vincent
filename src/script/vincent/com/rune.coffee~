COMContainer = require "./container"
COMTrapPolicy = require "./trapPolicy"
COMTravelPolicy = require "./travelPolicy"
COMText = require "./text"
COMAnchor = require "./anchor"
class COMRune extends COMContainer
    @RunePlaceBegin = "\uE1F5"
    @RunePlaceEnd = "\uE1F6"
    type:"Rune"
    constructor:(@context,@data)->
        super(@context,@data)
        @length = 1
        @decorations = []
        @trapPolicy = new COMTrapPolicy(this).behave {
            trap:"ignore"
        }
        @context.components.assign this
        @__defineGetter__ "length",()->
            return @cid.toString().length + 2
        @__defineGetter__ "contentString",()->
            return COMRune.RunePlaceBegin + @cid + COMRune.RunePlaceEnd
    render:()->
        super()
    detectTextOffset:(el)->
        if @el.contains el or @el is el
            return {offset:0,part:@el}
    getCorrespondingBoundaryByOffset:(offset,inside)->
        for item,index in @el.parentElement.childNodes
            if item is @el
                targetIndex = index
                break
        if offset is 0
            return node:@el.parentElement,offset:targetIndex
        else if offset < @length or inside
            return node:@el,type:"include"
        else
            return node:@el.parentElement,offset:targetIndex + 1
        return null
    insertText:(start,value)->
        if start is 0
            return @before new COMText @context,{contentString:value}
        if start > 0
            return @after new COMText @context,{contentString:value}
        return false

    removeText:(start,length)->
        @remove()
        return true
module.exports = COMRune
