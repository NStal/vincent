// Generated by CoffeeScript 1.10.0
(function() {
  var COMCursor, COMSelection, Errors, WalkerRootFirst,
    slice = [].slice;

  COMCursor = require("./cursor");

  WalkerRootFirst = (require("./helper/walker")).WalkerRootFirst;

  Errors = require("./errors");

  COMSelection = (function() {
    function COMSelection(context, cursor) {
      this.context = context;
      this.baseCursor = this.context.createCursor({
        isShadow: true,
        name: "baseCursor"
      });
      this.extentCursor = cursor;
      this.__defineGetter__("baseAnchor", function() {
        return this.baseCursor.anchor;
      });
      this.__defineGetter__("extentAnchor", function() {
        return this.extentCursor.anchor;
      });
    }

    COMSelection.prototype.fromAnchor = function(baseAnchor, extentAnchor) {
      this.baseCursor.pointAtAnchor(baseAnchor);
      this.extentCursor.pointAtAnchor(extentAnchor);
      if (!this.isActive) {
        this.collapseToCursor();
      }
      return true;
    };

    COMSelection.prototype.fromDOMRegion = function(base, extent) {
      if (!this.baseCursor.setCursorByDOMRegion(base)) {
        return false;
      }
      if (!this.extentCursor.setCursorByDOMRegion(extent)) {
        return false;
      }
      if (!this.isActive) {
        this.collapseToCursor();
      }
      return true;
    };

    COMSelection.prototype.activate = function() {
      if (this.isActive) {
        return;
      }
      this.isActive = true;
      return this.collapseToCursor();
    };

    COMSelection.prototype.deactivate = function() {
      if (!this.isActive) {
        return;
      }
      return this.isActive = false;
    };

    COMSelection.prototype.cancel = function() {
      this.collapseToCursor();
      return this.deactivate();
    };

    COMSelection.prototype.collapseToBegin = function() {
      var position, ref, swap;
      position = (ref = this.baseAnchor) != null ? ref.compare(this.extentAnchor) : void 0;
      if (!position) {
        return false;
      }
      if (position === "after") {
        swap = true;
      }
      if (swap) {
        return this.collapseToCursor(this.extentCursor);
      } else {
        return this.collapseToCursor(this.baseCursor);
      }
    };

    COMSelection.prototype.collapseToEnd = function() {
      var position, ref, swap;
      position = (ref = this.baseAnchor) != null ? ref.compare(this.extentAnchor) : void 0;
      if (!position) {
        return false;
      }
      if (position === "after") {
        swap = true;
      }
      if (swap) {
        return this.collapseToCursor(this.baseCursor);
      } else {
        return this.collapseToCursor(this.extentCursor);
      }
    };

    COMSelection.prototype.collapseToCursor = function(cursor) {
      if (cursor == null) {
        cursor = this.extentCursor;
      }
      if (!cursor || !cursor.anchor) {
        return false;
      }
      this.baseCursor.pointAtAnchor(cursor.anchor);
      if (cursor !== this.extentCursor) {
        this.extentCursor.pointAtAnchor(cursor.anchor);
      }
      return true;
    };

    COMSelection.prototype.baseAction = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.baseCursor).conduct.apply(ref, args);
    };

    COMSelection.prototype.extentAction = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.extentCursor).conduct.apply(ref, args);
    };

    COMSelection.prototype.clear = function() {
      this.baseAnchor = null;
      return this.extentAnchor = null;
    };

    COMSelection.prototype.isValid = function() {
      var ref, ref1;
      return (((ref = this.baseAnchor) != null ? ref.node.root : void 0) != null) && (((ref1 = this.extentAnchor) != null ? ref1.node.root : void 0) != null);
    };

    COMSelection.prototype.isCollapsed = function() {
      if (!this.baseAnchor || !this.extentAnchor) {
        return true;
      }
      return this.baseAnchor.node === this.extentAnchor.node && this.baseAnchor.index === this.extentAnchor.index && (this.baseAnchor.inside != null) === (this.extentAnchor.inside != null);
    };

    COMSelection.prototype.debug = function() {
      return this.baseAnchor.node.type + ":" + this.baseAnchor.index + "~" + this.extentAnchor.node.type + ":" + this.extentAnchor.index;
    };

    COMSelection.prototype.selectAll = function() {
      var first, last, walker;
      this.activate();
      walker = new WalkerRootFirst(this.context);
      if (!walker.first(function(item) {
        return item.anchor;
      })) {
        return false;
      }
      first = walker.node;
      if (!walker.last(function(item) {
        return item.anchor;
      })) {
        return false;
      }
      last = walker.node;
      this.fromAnchor(first.anchor, last.anchor);
      this.baseCursor.conduct("head");
      return this.extentCursor.conduct("tail");
    };

    COMSelection.prototype.getSelectedCollection = function() {
      var anchor, beginAnchor, beginAnchorOrigin, beginNode, beginPosition, endAnchor, endAnchorOrigin, endNode, endPosition, position, result, results, swap, walker;
      if (!this.isValid()) {
        return null;
      }
      position = this.baseAnchor.compare(this.extentAnchor);
      if (position === "after") {
        swap = true;
      }
      if (!swap) {
        beginNode = this.baseAnchor.node;
        endNode = this.extentAnchor.node;
        beginAnchor = this.baseAnchor.clone();
        endAnchor = this.extentAnchor.clone();
        beginAnchorOrigin = this.baseAnchor;
        endAnchorOrigin = this.extentAnchor;
      } else {
        beginNode = this.extentAnchor.node;
        endNode = this.baseAnchor.node;
        beginAnchor = this.extentAnchor.clone();
        endAnchor = this.baseAnchor.clone();
        beginAnchorOrigin = this.extentAnchor;
        endAnchorOrigin = this.baseAnchor;
      }
      walker = new WalkerRootFirst(this.context);
      walker.setNode(beginNode);
      results = [];
      while (true) {
        if (!walker.node) {
          break;
        }
        anchor = walker.node.anchor.clone();
        anchor.head();
        beginPosition = anchor.compare(endAnchor);
        anchor.tail();
        endPosition = anchor.compare(endAnchor);
        position = walker.node.compareNodePosition(endNode);
        if (beginPosition === "identical" || beginPosition === "after") {
          if (beginPosition === "identical") {
            results.push(walker.node);
          }
          break;
        }
        if (endPosition === "before") {
          results.push(walker.node);
          walker.skipChildOnce = true;
          if (!walker.next((function(item) {
            return item.anchor;
          }))) {
            break;
          }
          continue;
        }
        if (endPosition === "identical") {
          results.push(walker.node);
          break;
        }
        if (endPosition === "after") {
          results.push(walker.node);
          break;
        }
        if (endPosition === "under" || endPosition === "contain") {
          results.push(walker.node);
          break;
        }
        throw new Errors.LogicError("anchor compare returns unexpected value " + beginPosition + " " + endPosition);
      }
      result = {
        beginNode: beginNode,
        endNode: endNode,
        beginAnchor: beginAnchor,
        endAnchor: endAnchor,
        nodes: results,
        beginAnchorOrigin: beginAnchorOrigin,
        endAnchorOrigin: endAnchorOrigin
      };
      return result;
    };

    COMSelection.prototype.copySelectedNodes = function() {
      var collection, result;
      collection = this.getSelectedCollection();
      result = this.context.root.slice({
        left: collection.beginAnchor,
        right: collection.endAnchor,
        selection: true
      });
      return result;
    };

    COMSelection.prototype.cutSelectedNodes = function() {
      var result;
      result = this.copySelectedNodes();
      this.removeSelectedNodes();
      return result;
    };

    COMSelection.prototype.removeSelectedNodes = function() {
      var collection, head, i, len, node, ref, tail;
      collection = this.getSelectedCollection();
      if (collection.beginNode === collection.endNode) {
        collection.beginAnchor.deleteBetween(collection.endAnchor);
      } else {
        ref = collection.nodes;
        for (i = 0, len = ref.length; i < len; i++) {
          node = ref[i];
          if (node === collection.beginNode) {
            tail = collection.beginAnchor.clone();
            tail.tail();
            collection.beginAnchor.deleteBetween(tail);
          } else if (node === collection.endNode) {
            head = collection.endAnchor.clone();
            head.head();
            head.deleteBetween(collection.endAnchor);
          } else {
            node.remove();
          }
        }
      }
      collection.beginNode.anchor.fromJSON(collection.beginAnchor.toJSON());
      this.extentCursor.pointAtAnchor(collection.beginAnchor);
      this.collapseToCursor();
      this.cancel();
      return collection;
    };

    return COMSelection;

  })();

  module.exports = COMSelection;

}).call(this);
