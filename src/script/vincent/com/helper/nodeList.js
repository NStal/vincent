// Generated by CoffeeScript 1.10.0
(function() {
  var COMNodeList, EventEmitter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EventEmitter = (require("../events")).EventEmitter;

  COMNodeList = (function(superClass) {
    extend(COMNodeList, superClass);

    function COMNodeList() {
      COMNodeList.__super__.constructor.call(this);
      this.nodes = [];
      this.__defineGetter__("length", (function(_this) {
        return function() {
          return _this.nodes.length;
        };
      })(this));
    }

    COMNodeList.prototype.add = function() {
      var change, i, len, node, nodes;
      nodes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      change = false;
      for (i = 0, len = nodes.length; i < len; i++) {
        node = nodes[i];
        if (indexOf.call(this.nodes, node) < 0) {
          (function(_this) {
            return (function(node) {
              _this.nodes.push(node);
              change = true;
              node.stopListenBy(_this);
              return node.listenBy(_this, "pend", function() {
                return _this.emit("pend", node);
              });
            });
          })(this)(node);
        }
      }
      if (change) {
        return this.emit("change");
      }
    };

    COMNodeList.prototype.remove = function() {
      var change, nodes;
      nodes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      change = false;
      this.nodes = this.nodes.filter(function(item) {
        if (indexOf.call(nodes, item) >= 0) {
          change = true;
          item.stopListenBy(this);
          return false;
        }
        return true;
      });
      if (change) {
        return this.emit("change");
      }
    };

    COMNodeList.prototype.at = function(index) {
      return this.nodes[index];
    };

    COMNodeList.prototype.first = function() {
      return this.nodes[0] || null;
    };

    COMNodeList.prototype.sort = function() {
      return this.nodes.sort(function(a, b) {
        var position;
        position = a.compareNodePosition(b);
        if (position === "under" || position === "contain" || position === "identical") {
          return 0;
        } else if (position === "before") {
          return -1;
        } else {
          return 1;
        }
      });
    };

    COMNodeList.prototype.toArray = function() {
      return this.nodes.slice();
    };

    return COMNodeList;

  })(EventEmitter);

  module.exports = COMNodeList;

}).call(this);
