// Generated by CoffeeScript 1.10.0
(function() {
  var DOMChar;

  DOMChar = (function() {
    DOMChar.fromClientPoint = function(x, y) {
      var range, startOffset;
      range = document.caretRangeFromPoint(x, y);
      if (!range) {
        return null;
      }
      if (!(range.startContainer instanceof Text)) {
        startOffset = 0;
      } else {
        startOffset = range.startOffset;
      }
      return new DOMChar(range.startContainer, startOffset);
    };

    function DOMChar(textNode, index1) {
      var child, i, len, ref, target;
      this.textNode = textNode;
      this.index = index1;
      if ((!(this.textNode instanceof Text)) && (this.textNode instanceof HTMLElement) && typeof index === "number") {
        target = this.textNode;
        while (!(target instanceof Text)) {
          ref = target.childNodes;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            target = child;
            continue;
          }
          if (child.nextSibling) {
            target = child.nextSibling;
            continue;
          }
          while (child.parentElement !== this.textNode) {
            child = child.parentElement;
            if (child.nextSibling) {
              target = child.nextSibling;
              break;
            }
          }
        }
        if (target instanceof Text) {
          this.textNode = target;
          this.index = 0;
        } else {
          this.invalid = true;
        }
      }
      return;
    }

    DOMChar.prototype.isVisible = function() {
      var char;
      char = this.textNode.textContent[this.index];
      return (char !== "\n" && char !== " " && char !== "\r" && char !== "\t") && !this.isTailing();
    };

    DOMChar.prototype.isTailing = function() {
      return this.textNode.length <= this.index;
    };

    DOMChar.prototype.isChar = function() {
      return this.textNode instanceof Text;
    };

    DOMChar.prototype.getClientRect = function() {
      var content, e, error, holder, range, rect;
      if (!this.isChar()) {
        return this.textNode.getBoundingClientRect();
      }
      content = this.textNode.textContent;
      if (!this.isVisible()) {
        holder = "p";
        this.textNode.textContent = content.slice(0, this.index) + holder + content.slice(this.index);
      }
      range = document.createRange();
      if (!this.textNode || this.textNode.textContent.length < this.index) {
        Logger.error("invalid DOM char", this.textNode, this.index);
        return null;
      }
      try {
        range.setStart(this.textNode, this.index);
        range.setEnd(this.textNode, this.index + 1);
      } catch (error) {
        e = error;
        Logger.error("invalid DOM char", this.textNode, this.index, this.describe());
        return null;
      }
      rect = range.getBoundingClientRect();
      if (holder) {
        this.textNode.textContent = content;
      }
      return rect;
    };

    DOMChar.prototype.getRect = function(option) {
      var fix, rect, resolveScrollTopFix;
      if (option == null) {
        option = {};
      }
      rect = this.getClientRect();
      rect = {
        top: rect.top,
        left: rect.left,
        bottom: rect.bottom,
        right: rect.right,
        height: rect.height,
        width: rect.width
      };
      resolveScrollTopFix = function(el) {
        var fix;
        fix = 0;
        while (el) {
          fix += el.scrollTop || 0;
          if (el === option.top) {
            break;
          }
          el = el.parentElement;
        }
        return fix;
      };
      fix = resolveScrollTopFix(this.textNode);
      rect.top += fix;
      rect.bottom += fix;
      return rect;
    };

    DOMChar.prototype.describe = function() {
      var contentString, extending;
      if (this.textNode instanceof Text) {
        contentString = this.textNode.textContent;
        extending = 20;
        if (contentString.length === this.index) {
          return "Char: " + contentString + "[ ]";
        }
        return "Char: " + (contentString.slice(this.index - extending, this.index)) + "[" + contentString[this.index] + "]" + (contentString.slice(this.index + 1, this.index + extending));
      }
      return "Char: Element " + this.textNode + "," + this.index;
    };

    return DOMChar;

  })();

  module.exports = DOMChar;

}).call(this);
