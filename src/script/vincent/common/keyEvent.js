// Generated by CoffeeScript 1.10.0
(function() {
  var KeyEvent, clearCmdTimer, code, hasCommandKey, i, isMac, outputMap, ref, ref1,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Leaf.Key.home = 36;

  Leaf.Key.end = 35;

  Leaf.Key.quote = 222;

  Leaf.Key.openBracket = 219;

  Leaf.Key.closeBracket = 221;

  Leaf.Key.backSlash = 220;

  Leaf.Key.slash = 191;

  Leaf.Key.comma = 188;

  Leaf.Key.period = 190;

  Leaf.Key.dash = 189;

  Leaf.Key.semiColon = 186;

  Leaf.Key.graveAccent = 192;

  hasCommandKey = false;

  window.hasCommandKey = false;

  outputMap = {};

  for (code = i = 65; i < 90; code = ++i) {
    outputMap[code] = String.fromCharCode(code);
  }

  isMac = ((ref = window.navigator.platform) != null ? (ref1 = ref.toLowerCase()) != null ? ref1.indexOf("mac") : void 0 : void 0) >= 0;

  clearCmdTimer = null;

  window.addEventListener("keydown", function(e) {
    var ref2;
    if (((ref2 = e.which) === 224 || ref2 === 91 || ref2 === 93) && isMac) {
      hasCommandKey = true;
      window.hasCommandKey = true;
      clearTimeout(clearCmdTimer);
      return setTimeout((function(_this) {
        return function() {
          hasCommandKey = false;
          return window.hasCommandKey = false;
        };
      })(this), 5000);
    }
  });

  window.addEventListener("keyup", function(e) {
    var ref2;
    if (((ref2 = e.which) === 224 || ref2 === 91 || ref2 === 93) && isMac) {
      hasCommandKey = false;
      return window.hasCommandKey = false;
    }
  });

  window.addEventListener("blur", function(e) {
    hasCommandKey = false;
    return window.hasCommandKey = false;
  });

  window.addEventListener("focus", function(e) {
    hasCommandKey = false;
    return window.hasCommandKey = false;
  });

  module.exports = KeyEvent = (function() {
    function KeyEvent(raw) {
      var ref2;
      this.raw = raw;
      this.code = (ref2 = this.raw) != null ? ref2.which : void 0;
      this.ctrlKey = this.raw.ctrlKey;
      this.shiftKey = this.raw.shiftKey;
      this.altKey = this.raw.altKey;
      this.commandKey = hasCommandKey;
      this.simulateName = this.raw.simulateName;
      if (this.raw.type === "keydown") {
        this.keyDown = true;
      } else if (this.raw.type === "keyup") {
        this.keyUp = true;
      } else {
        this.keyDown = true;
      }
    }

    KeyEvent.prototype.capture = function() {
      var ref2, ref3;
      this.defaultPrevented = true;
      this.propagationStoped = true;
      if ((ref2 = this.raw) != null) {
        if (typeof ref2.preventDefault === "function") {
          ref2.preventDefault();
        }
      }
      return (ref3 = this.raw) != null ? typeof ref3.stopImmediatePropagation === "function" ? ref3.stopImmediatePropagation() : void 0 : void 0;
    };

    KeyEvent.prototype.isValid = function() {
      return !this.defaultPrevented && !this.propagationStoped;
    };

    KeyEvent.prototype.canOutput = function() {
      var j, ref2, results;
      return ref2 = this.code, indexOf.call([48, 49, 50, 51, 52, 53, 54, 55, 56, 57].concat((function() {
        results = [];
        for (j = 65; j <= 90; j++){ results.push(j); }
        return results;
      }).apply(this), [Leaf.Key.space, Leaf.Key.enter, Leaf.Key.quote, Leaf.Key.openBracket, Leaf.Key.closeBracket, Leaf.Key.backSlash, Leaf.Key.slash, Leaf.Key.comma, Leaf.Key.period, Leaf.Key.dash, Leaf.Key.graveAccent]), ref2) >= 0;
    };

    KeyEvent.prototype.getInputText = function() {
      var char;
      char = outputMap[this.code] || "";
      if (!this.shiftKey) {
        return char.toLowerCase();
      } else {
        return char.toUpperCase();
      }
    };

    KeyEvent.prototype.isKey = function(name) {
      if (this.simulateName === name) {
        return true;
      }
      return this.code && Leaf.Key[name] === this.code;
    };

    KeyEvent.prototype.isModified = function() {
      return this.ctrlKey || this.altKey;
    };

    KeyEvent.prototype.isMod = function() {
      return hasCommandKey || this.ctrlKey;
    };

    KeyEvent.prototype.isModMatch = function(ctrl, command, mod) {
      if (this.ctrlKey) {
        if (!ctrl && (isMac || mod !== true)) {
          return false;
        }
      } else {
        if (ctrl || (!isMac && (mod === true))) {
          return false;
        }
      }
      if (hasCommandKey) {
        if (!command && mod !== true) {
          return false;
        }
      } else {
        if (command || (isMac && mod === true)) {
          return false;
        }
      }
      return true;
      if (ctrl !== this.ctrlKey && (!isMac || mod !== this.ctrlKey)) {
        return false;
      }
      if (command !== hasCommandKey) {
        return false;
      }
      if (isMac && mod !== hasCommandKey) {
        if (command !== hasCommandKey) {
          return false;
        }
      }
      if (!isMac && mod !== this.ctrlKey) {
        if (ctrl !== this.ctrlKey) {
          return false;
        }
      }
      return true;
    };

    return KeyEvent;

  })();

}).call(this);
