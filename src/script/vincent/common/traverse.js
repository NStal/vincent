// Generated by CoffeeScript 1.10.0
(function() {
  var DOMWalker;

  DOMWalker = (function() {
    function DOMWalker(node1, begin1, end1) {
      this.node = node1;
      this.begin = begin1;
      this.end = end1;
    }

    DOMWalker.prototype.traverse = function(handler) {
      var next, node, pn, results, top;
      top = this.node;
      if (!top.childNodes || top.childNodes.length === 0) {
        if (top && this.begin === top || this.end === top) {
          handler(top);
        }
        return;
      }
      node = this.begin || top.childNodes[0];
      results = [];
      while (true) {
        if (!node) {
          break;
        }
        if (handler(node)) {
          break;
        }
        if (node === top) {
          break;
        }
        if (node === this.end) {
          break;
        }
        if (node.childNodes && node.childNodes.length > 0) {
          node = node.childNodes[0];
          continue;
        }
        next = node.nextSibling;
        if (next) {
          node = next;
          continue;
        }
        results.push((function() {
          var results1;
          results1 = [];
          while (node = node.parentElement) {
            pn = node.nextSibling;
            if (node === top) {
              break;
            }
            if (pn) {
              node = pn;
              break;
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    };

    return DOMWalker;

  })();

  exports.traverse = function(node, handler) {
    var walker;
    walker = new DOMWalker(node);
    return walker.traverse(handler);
  };

  exports.traverseRange = function(range, handler) {
    var begin, end, top, walker;
    top = range.commonAncestorContainer;
    if (range.startContainer instanceof window.Text) {
      begin = range.startContainer;
    } else {
      begin = range.startContainer.children[range.startOffset];
    }
    if (range.endContainer instanceof window.Text) {
      end = range.endContainer;
    } else {
      end = range.endContainer.children[range.endOffset];
    }
    walker = new DOMWalker(top, begin, end);
    return walker.traverse(handler);
  };

}).call(this);
