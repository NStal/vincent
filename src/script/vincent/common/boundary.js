// Generated by CoffeeScript 1.10.0
(function() {
  var DOMBoundary;

  DOMBoundary = (function() {
    DOMBoundary.createRangeBetween = function(b1, b2) {
      var b, fix, position, range, ref, startIndex, startTarget;
      b1 = new DOMBoundary(b1);
      b2 = new DOMBoundary(b2);
      range = document.createRange();
      position = b1.compare(b2);
      if (position === "identical") {
        if (b1.include || b2.include) {
          range.setStart(b1.getTargetParent(), b1.getTargetIndex());
          range.setEnd(b1.getTargetParent(), b1.getTargetIndex() + 1);
        } else {
          range.setStart(b1.getTargetParent(), b1.getTargetIndex());
          range.setEnd(b1.getTargetParent(), b1.getTargetIndex());
        }
        return range;
      }
      if (position === "after") {
        b = b2;
        b2 = b1;
        b1 = b;
      }
      startTarget = b1.getTargetParent();
      if (!startTarget) {
        Logger.error("no start target", b1);
        return null;
      }
      startIndex = Math.min(startTarget.length || ((ref = startTarget.children) != null ? ref.length : void 0) || 0, b1.getTargetIndex());
      range.setStart(startTarget, startIndex);
      if (b2.include) {
        fix = 1;
      } else {
        fix = 0;
      }
      range.setEnd(b2.getTargetParent(), b2.getTargetIndex() + fix);
      return range;
    };

    function DOMBoundary(option) {
      if (option == null) {
        option = {};
      }
      this.node = option.node;
      this.offset = option.offset || 0;
      this.type = option.type || "left";
      this.include = this.type === "include";
    }

    DOMBoundary.prototype.getAdjacentElement = function() {
      var result, target;
      result = {};
      if (!this.include) {
        if (this.offset === 0 && this.type === "left") {
          result.left = this.getPreviousElement(this.node.parentElement);
        }
        if (this.offset === this.node.length || (this.offset === this.node.length - 1 && this.type === "right")) {
          result.right = this.getNextElement(this.node.parentElement);
        }
      } else {
        target = this.node.childNodes[this.offset];
        result.left = this.getPreviousElement(target);
        result.right = this.getNextElement(target);
      }
      return result;
    };

    DOMBoundary.prototype.getNextElement = function(el) {
      while (el) {
        if (el.nextElementSibling) {
          return el.nextElementSibling;
        } else {
          el = el.parentElement;
        }
      }
      return null;
    };

    DOMBoundary.prototype.getPreviousElement = function(el) {
      while (el) {
        if (el.previousElementSibling) {
          return el.previousElementSibling;
        } else {
          el = el.parentElement;
        }
      }
      return null;
    };

    DOMBoundary.prototype.getTargetElement = function() {
      if (this.type === "include") {
        return this.node;
      }
      return this.node.childNodes && this.node.childNodes[this.offset || 0] || null;
    };

    DOMBoundary.prototype.getTargetParent = function() {
      if (this.type === "include") {
        return this.node.parentElement;
      } else {
        return this.node;
      }
    };

    DOMBoundary.prototype.getTargetIndex = function() {
      var child, fix, i, index, len, ref;
      if (this.type === "right") {
        fix = 1;
      } else {
        fix = 0;
      }
      if (this.type === "include") {
        ref = this.node.parentElement.childNodes;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          child = ref[index];
          if (child === this.node) {
            return index + fix;
          }
        }
      } else {
        return this.offset + fix;
      }
      return null;
    };

    DOMBoundary.prototype.compare = function(boundary) {
      var o1, o2, ref, ref1, ref2, result, subResult;
      result = (ref = this.getTargetParent()) != null ? ref.compareDocumentPosition(boundary.getTargetParent()) : void 0;
      o1 = this.getTargetIndex() || 0;
      o2 = boundary.getTargetIndex() || 0;
      if (result === 0) {
        if (o1 > o2) {
          return "after";
        } else if (o1 < o2) {
          return "before";
        } else {
          return "identical";
        }
      } else if ((result & 8) === 8) {
        subResult = (ref1 = this.getTargetParent()) != null ? ref1.compareDocumentPosition(boundary.getTargetElement()) : void 0;
        if ((subResult & 8) === 8) {
          return "after";
        } else if ((subResult & 2) === 2) {
          return "after";
        } else {
          return "before";
        }
      } else if ((result & 16) === 16) {
        subResult = (ref2 = this.getTargetElement()) != null ? ref2.compareDocumentPosition(boundary.getTargetParent()) : void 0;
        if ((subResult & 16) === 16) {
          return "before";
        } else if ((subResult & 2) === 2) {
          return "after";
        } else {
          return "before";
        }
      } else if ((result & 2) === 2) {
        return "after";
      } else {
        return "before";
      }
    };

    return DOMBoundary;

  })();

  module.exports = DOMBoundary;

}).call(this);
