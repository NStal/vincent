// Generated by CoffeeScript 1.10.0
(function() {
  var DOMRegion;

  DOMRegion = (function() {
    DOMRegion.rangeFromPoint = function(x, y) {
      var position, range;
      if (document.caretRangeFromPoint) {
        range = document.caretRangeFromPoint(x, y);
        return range;
      } else if (document.caretPositionFromPoint) {
        position = document.caretPositionFromPoint(x, y);
        if (!position) {
          return null;
        }
        range = document.createRange();
        range.setStart(position.offsetNode, position.offset);
        range.setEnd(position.offsetNode, position.offset);
        return range;
      }
      return null;
    };

    DOMRegion.fromClientPoint = function(x, y) {
      var range;
      range = this.rangeFromPoint(x, y);
      if (!range) {
        return null;
      }
      return new DOMRegion(range.startContainer, range.startOffset);
    };

    DOMRegion.fromBoundary = function(b) {
      var i, index, len, node, ref;
      if (b.type === "include") {
        ref = b.node.parentElement.childNodes;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          node = ref[index];
          if (b.node === node) {
            return new DOMRegion(b.node.parentElement, index);
          }
        }
      } else {
        return new DOMRegion(b.node, b.offset);
      }
    };

    function DOMRegion(node1, index1) {
      this.node = node1;
      this.index = index1;
    }

    DOMRegion.prototype.isChar = function() {
      return this.node instanceof Text;
    };

    DOMRegion.prototype.isVisibleText = function() {
      var char;
      char = this.node.textContent[this.index];
      return char !== "\n";
    };

    DOMRegion.prototype.isNewLine = function() {
      var char;
      char = this.node.textContent[this.index];
      return char === "\n";
    };

    DOMRegion.prototype.char = function() {
      var char;
      return char = this.node.textContent[this.index];
    };

    DOMRegion.prototype.nextChar = function() {
      return this.node.textContent[this.index + 1];
    };

    DOMRegion.prototype.previousChar = function() {
      return this.node.textContent[this.index - 1];
    };

    DOMRegion.prototype.selectRectByChar = function(rects) {
      if (rects.length === 1) {
        return rects[0];
      }
      if (this.previousChar() === "\n") {
        return rects[1];
      }
      if (rects.length > 1 && rects[0].width === 0 && rects[1].top === rects[0].top && rects[1]) {
        return rects[1];
      }
      return rects[0];
    };

    DOMRegion.prototype.isTailing = function() {
      return this.node.length <= this.index;
    };

    DOMRegion.prototype.getContainerElement = function() {
      if (this.node.type === this.node.ELEMENT_NODE) {
        return this.node;
      } else {
        return this.node.parentElement;
      }
    };

    DOMRegion.prototype.getIncludeElement = function() {
      var ref;
      if (((ref = this.node.childNodes[this.index]) != null ? ref.type : void 0) === this.node.ELEMENT_NODE) {
        return this.node.childNodes[this.index];
      }
      return null;
    };

    DOMRegion.prototype.getClientRect = function() {
      var el, rect;
      if (this.isChar()) {
        rect = this.getCharClientRect();
        return rect;
      } else {
        el = this.node.childNodes[this.index];
        if (!el) {
          return null;
        }
        if (el.innerRegionElement) {
          return el.innerRegionElement.getBoundingClientRect();
        }
        return el.getBoundingClientRect();
      }
    };

    DOMRegion.prototype.getRect = function(option) {
      var fix, fixRect, rect, resolveScrollTopFix;
      rect = this.getClientRect();
      if (!rect) {
        return null;
      }
      rect = {
        top: rect.top,
        left: rect.left,
        bottom: rect.bottom,
        right: rect.right,
        height: rect.height,
        width: rect.width
      };
      resolveScrollTopFix = function(el) {
        var fix;
        fix = 0;
        while (el) {
          fix += el.scrollTop || 0;
          if (el === option.top) {
            break;
          }
          el = el.parentElement;
        }
        return fix;
      };
      if (option.top) {
        fixRect = option.top.getBoundingClientRect();
      }
      if (this.isChar()) {
        fix = resolveScrollTopFix(this.node);
      } else {
        fix = resolveScrollTopFix(this.node.childNodes[this.index]);
      }
      rect.top += fix;
      rect.bottom += fix;
      if (fixRect) {
        rect.left -= fixRect.left;
        rect.right -= fixRect.left;
        rect.top -= fixRect.top;
        rect.bottom -= fixRect.top;
      }
      return rect;
    };

    DOMRegion.prototype.tryGetLeftCharClientRect = function() {
      var leftOne, range, rect;
      if (this.index < 1) {
        return null;
      }
      leftOne = this.node.textContent[this.index - 1];
      if (leftOne === "\n") {
        return null;
      }
      range = document.createRange();
      range.setStart(this.node, this.index - 1);
      range.setEnd(this.node, this.index);
      rect = range.getBoundingClientRect();
      if (!rect) {
        return null;
      }
      return Object.seal({
        left: rect.right,
        right: rect.right,
        width: 0,
        height: rect.height,
        top: rect.top,
        bottom: rect.bottom
      });
    };

    DOMRegion.prototype.getCharClientRect = function() {
      var content, holder, range, rect, rects, useHolder;
      content = this.node.textContent;
      range = document.createRange();
      if (!this.node || this.node.textContent.length < this.index) {
        return null;
      }
      if (this.node.textContent.length === 0 || this.isTailing()) {
        useHolder = true;
      }
      if (this.node.textContent[this.index] === "\n" && this.node.textContent.length - 1 === this.index && this.previousChar() === "\n") {
        useHolder = true;
      }
      if (useHolder) {
        holder = " ";
        this.node.textContent = content.slice(0, this.index) + holder + content.slice(this.index);
      }
      if (!this.node) {
        return null;
      }
      range.setStart(this.node, this.index);
      range.setEnd(this.node, this.index + 1);
      rects = range.getClientRects();
      rect = this.selectRectByChar(rects);
      if (useHolder) {
        this.node.textContent = content;
      }
      return rect;
    };

    DOMRegion.prototype.describe = function() {
      if (this.isChar()) {
        return this.describeChar();
      } else {
        return this.describeElement();
      }
    };

    DOMRegion.prototype.describeElement = function() {
      return this.node.childNodes[this.index];
    };

    DOMRegion.prototype.describeChar = function() {
      var contentString, extending;
      contentString = this.node.textContent;
      extending = 20;
      if (contentString.length === this.index) {
        return "Char: " + contentString + "[ ]";
      }
      return "Char: " + (contentString.slice(this.index - extending, this.index)) + "[" + contentString[this.index] + "]" + (contentString.slice(this.index + 1, this.index + extending));
    };

    return DOMRegion;

  })();

  module.exports = DOMRegion;

}).call(this);
