// Generated by CoffeeScript 1.10.0
(function() {
  var COMComposer, COMContext, COMElement, COMNamespace, COMNode, COMRichText, COMSpell, Decoration, Pack,
    slice = [].slice;

  COMRichText = require("./com/richText");

  Decoration = require("./com/decoration");

  COMSpell = require("./com/spell");

  COMElement = require("./com/element");

  COMNamespace = require("./com/namespace");

  COMNode = require("./com/node");

  COMContext = require("./com/context");

  COMComposer = require("./com/composer");

  Pack = (function() {
    function Pack() {
      var packs;
      packs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.decorations = [];
      this.spells = [];
      this.nodes = [];
      this.composers = [];
      this.add.apply(this, packs);
      this.cmds = [];
      this.hotkeys = [];
    }

    Pack.prototype.add = function() {
      var Cons, i, item, len, results;
      Cons = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (i = 0, len = Cons.length; i < len; i++) {
        item = Cons[i];
        if (item.prototype instanceof Decoration.DecorationMaintainer) {
          results.push(this.decorations.push(new item));
        } else if (item instanceof Decoration.DecorationMaintainer) {
          results.push(this.decorations.push(item));
        } else if (item.prototype instanceof COMSpell) {
          results.push(this.spells.push(item));
        } else if (item.prototype instanceof COMNode) {
          results.push(this.nodes.push(item));
        } else if (item instanceof COMComposer) {
          results.push(this.composers.push(item));
        } else if (item.prototype instanceof COMComposer) {
          results.push(this.composers.push(new item()));
        } else {
          results.push(Logger.error("unknown inline resource", item));
        }
      }
      return results;
    };

    Pack.prototype.registerCommand = function(cmd) {
      return this.cmds.push(cmd);
    };

    Pack.prototype.registerHotkey = function(keyString, handler) {
      return this.hotkeys.push({
        keyString: keyString,
        handler: handler
      });
    };

    Pack.prototype.applyTo = function(target) {
      var i, item, j, k, l, len, len1, len2, len3, ref, ref1, ref2, ref3, results;
      ref = this.nodes;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        target.registerNode(item);
      }
      ref1 = this.composers;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        item = ref1[j];
        target.registerComposer(item.type, item);
      }
      ref2 = this.spells;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        item = ref2[k];
        target.registerSpell(item);
      }
      ref3 = this.decorations;
      results = [];
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        item = ref3[l];
        results.push(target.registerDecoration(item));
      }
      return results;
    };

    Pack.prototype.addConfig = function(config) {
      var Command, Composer, Element, Hotkey, Spell, i, j, k, l, len, len1, len2, len3, len4, len5, m, n, ref, ref1, ref2, ref3, ref4, ref5, results;
      ref = config.Commands;
      for (i = 0, len = ref.length; i < len; i++) {
        Command = ref[i];
        pack.registerCommand(Command);
      }
      ref1 = config.Hotkeys;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        Hotkey = ref1[j];
        pack.registerHotkey(Hotkey);
      }
      ref2 = config.Decorations;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        Decoration = ref2[k];
        pack.add(Decoration);
      }
      ref3 = config.Spells;
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        Spell = ref3[l];
        pack.add(Spell);
      }
      ref4 = config.Elements;
      for (m = 0, len4 = ref4.length; m < len4; m++) {
        Element = ref4[m];
        pack.add(Element);
      }
      ref5 = config.Composers;
      results = [];
      for (n = 0, len5 = ref5.length; n < len5; n++) {
        Composer = ref5[n];
        results.push(pack.add(Composer));
      }
      return results;
    };

    return Pack;

  })();

  module.exports = Pack;

}).call(this);
