// Generated by CoffeeScript 1.10.0
(function() {
  var Buffer, BufferManager, COMComposer, COMContext, COMDecoration, COMElement, COMNamespace, COMNode, COMRichText, COMSpell, CancelStack, Caret, Clipboard, CommandManager, ContextManager, DOMSelection, Debugger, DocumentFocus, DragManager, DropManager, Editor, HotkeyManager, InputMethod, NextRenderAware, Platform, PluginManager, SharedCallbacks,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  COMContext = require("./com/context");

  COMRichText = require("./com/richText");

  COMNamespace = require("./com/namespace");

  COMDecoration = require("./com/decoration");

  COMSpell = require("./com/spell");

  COMElement = require("./com/element");

  COMNode = require("./com/node");

  COMComposer = require("./com/composer");

  Caret = require("./facility/caret");

  InputMethod = require("./facility/inputMethod");

  HotkeyManager = require("./facility/hotkeyManager");

  CommandManager = require("./facility/commandManager");

  Clipboard = require("./facility/clipboard");

  PluginManager = require("./facility/pluginManager");

  Buffer = require("./facility/buffer");

  DropManager = require("./facility/dropManager");

  BufferManager = Buffer.BufferManager;

  Debugger = require("./facility/debugger");

  Platform = require("./facility/platform");

  ContextManager = require("./facility/contextManager");

  DocumentFocus = require("./facility/documentFocus");

  DOMSelection = require("./facility/selection");

  CancelStack = require("./facility/cancelStack");

  DragManager = require("./facility/dragManager");

  SharedCallbacks = require("/component/sharedCallbacks");

  Editor = (function(superClass) {
    extend(Editor, superClass);

    Editor.packs = [];

    Editor.prototype.COM = require("./com/index");

    function Editor(el) {
      this.asUser = bind(this.asUser, this);
      var Key, index;
      Editor.__super__.constructor.call(this, el);
      new NextRenderAware(this);
      this.namespace = COMContext.namespace;
      if (this["debugger"] == null) {
        this["debugger"] = new Debugger(this);
      }
      this.platform = Platform.create();
      this.contextManager = new ContextManager(this);
      this.contextManager.listenBy(this, "context/create", (function(_this) {
        return function(context) {
          return context.facilities.editor = _this;
        };
      })(this));
      this.bufferManager = new BufferManager(this);
      this.__defineGetter__("buffer", (function(_this) {
        return function() {
          return _this.bufferManager.currentFocus;
        };
      })(this));
      this.__defineGetter__("context", (function(_this) {
        return function() {
          var ref;
          return (ref = _this.bufferManager.currentFocus) != null ? ref.context : void 0;
        };
      })(this));
      this.__defineGetter__("selectSession", (function(_this) {
        return function() {
          var ref;
          return (ref = _this.bufferManager.currentFocus) != null ? ref.selectSession : void 0;
        };
      })(this));
      this.clipboard = new Clipboard(this);
      this.domSelection = new DOMSelection(this);
      if (this.inputMethod == null) {
        this.inputMethod = new InputMethod(this);
      }
      this.dragManager = new DragManager(this);
      if (this.caret == null) {
        this.caret = new Caret(this);
      }
      this.bufferManager.listenBy(this, "focus", (function(_this) {
        return function(buffer) {
          Buffer = require("./facility/buffer");
          if (buffer instanceof Buffer.RichBuffer) {
            return _this.caret.attachTo(buffer);
          }
        };
      })(this));
      this.initHeight = window.initHeight;
      this.caret.init();
      this.inputMethod.init();
      if (this.hotkeys == null) {
        this.hotkeys = new HotkeyManager(this);
      }
      if (this.commands == null) {
        this.commands = new CommandManager(this);
      }
      if (this.plugins == null) {
        this.plugins = new PluginManager(this);
      }
      if (this.dropManager == null) {
        this.dropManager = new DropManager(this);
      }
      if (this.cancelStack == null) {
        this.cancelStack = new CancelStack(this);
      }
      this.inputMethod.on("input", (function(_this) {
        return function(input) {
          var ref;
          if ((ref = _this.buffer) != null ? ref.lockUserInput : void 0) {
            return;
          }
          if (_this.focus.level !== "all") {
            return;
          }
          _this.userIsWriting = true;
          _this.conduct("write", input);
          return _this.userIsWriting = false;
        };
      })(this));
      index = 0;
      Key = Leaf.Key;
      this.inputMethod.on("key", (function(_this) {
        return function(event) {
          var locked, ref, ref1, ref2, ref3, ref4, ref5, ref6;
          locked = _this.lockUserInput || ((ref = _this.buffer) != null ? ref.lockUserInput : void 0);
          _this.hotkeys.handleKeyEvent(event);
          if (event.altKey && !event.ctrlKey && event.code !== Leaf.Key.d) {
            event.capture();
          }
          if (!event.defaultPrevented && !window.hasCommandKey && _this.buffer && event.keyDown && ((ref1 = _this.buffer) != null ? (ref2 = ref1.selection) != null ? ref2.isActive : void 0 : void 0) && !((ref3 = _this.buffer.selection) != null ? typeof ref3.isCollapsed === "function" ? ref3.isCollapsed() : void 0 : void 0) && !event.isModified() && _this.focus.level === "buffer") {
            if (event.canOutput()) {
              event.capture();
              if (!locked) {
                _this.userIsWriting = true;
                _this.conduct("delete-selection");
                _this.conduct("write", event.getInputText());
                _this.userIsWriting = false;
                return;
              }
            }
          }
          if (((ref4 = event.code) === Leaf.Key.backspace) && ((ref5 = (ref6 = document.activeElement) != null ? ref6.tagName : void 0) !== "TEXTAREA" && ref5 !== "INPUT")) {
            event.raw.preventDefault();
            event.raw.stopImmediatePropagation();
          }
          if (event.altKey && event.code !== Leaf.Key.d) {
            return event.raw.preventDefault();
          }
        };
      })(this));
      this.focus = new DocumentFocus.FocusManager(this);
      if (typeof this.registerPlugin === "function") {
        this.registerPlugin();
      }
    }

    Editor.prototype.asUser = function(fn) {
      var e, error, userIsWriting;
      userIsWriting = this.userIsWriting;
      this.userIsWriting = true;
      try {
        fn();
      } catch (error) {
        e = error;
        Logger.error("Error during Editor.asUser", e);
      }
      return this.userIsWriting = userIsWriting;
    };

    Editor.prototype.getAllPlugins = function() {
      return this.plugins.plugins;
    };

    Editor.prototype.init = function() {
      this.setup();
      this.activate();
      this.focus.allowAll();
      this.emit("ready");
      return this.platform.emitEmbedEvent("ready");
    };

    Editor.prototype.setup = function() {
      this.caret.show();
      return this.plugins.init();
    };

    Editor.prototype.conduct = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (args[0] === "write") {
        this.emit("write", args[1]);
      }
      return (ref = this.commands).conduct.apply(ref, args);
    };

    Editor.prototype.announce = function() {
      var args, name;
      name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this.emit.apply(this, ["announcement/" + name].concat(slice.call(args)));
    };

    Editor.prototype.activate = function() {
      if (this.isActive) {
        return false;
      }
      this.isActive = true;
      this.inputMethod.activate();
      this.caret.activate();
      this.renderFrame();
      return true;
    };

    Editor.prototype.deactivate = function() {
      if (!this.isActive) {
        return false;
      }
      this.isActive = false;
      clearTimeout(this.timer);
      cancelAnimationFrame(this.timer);
      this.inputMethod.deactivate();
      this.caret.deactivate();
      return true;
    };

    Editor.prototype.plugin = function(name) {
      return this.plugins.plugins[name];
    };

    Editor.prototype.render = function() {
      this.emit("beforeRender");
      this.bufferManager.render();
      if (document.body.scrollTop !== 0) {
        if (!this.lastScrollTop) {
          this.lastScrollTop = document.body.scrollTop;
        } else if (this.lastScrollTop === document.body.scrollTop) {
          document.body.scrollTop = 0;
        }
      }
      if (this.caret.isShow) {
        this.caret.update();
      }
      return this.emit("afterRender");
    };

    Editor.prototype.renderFrame = function() {
      this.render();
      return this.timer = this.nextRenderFrame((function(_this) {
        return function() {
          return _this.renderFrame();
        };
      })(this));
    };

    Editor.prototype.nextRenderFrame = function(frame) {
      return window.requestAnimationFrame(frame);
    };

    Editor.prototype.addComponent = function() {
      var Cons, i, item, len, results;
      Cons = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (i = 0, len = Cons.length; i < len; i++) {
        item = Cons[i];
        if (item.prototype instanceof COMDecoration.DecorationMaintainer) {
          results.push(this.namespace.registerDecoration(new item));
        } else if (item instanceof COMDecoration.DecorationMaintainer) {
          results.push(this.namespace.registerDecoration(item));
        } else if (item.prototype instanceof COMSpell) {
          results.push(this.namespace.registerSpell(item));
        } else if (item.prototype instanceof COMNode) {
          results.push(this.namespace.registerNode(item));
        } else if (item instanceof COMComposer) {
          results.push(this.namespace.registerComposer(item));
        } else if (item.prototype instanceof COMComposer) {
          results.push(this.namespace.registerComposer(new item()));
        } else {
          results.push(Logger.error("unknown inline resource", item));
        }
      }
      return results;
    };

    Editor.prototype.addPackageStatic = function(pack) {
      var Command, Composer, Dec, Element, Intent, Rune, Spell, handler, i, j, k, key, l, len, len1, len2, len3, len4, len5, len6, len7, m, n, o, p, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, results;
      ref = pack.prototype.Commands || [];
      for (i = 0, len = ref.length; i < len; i++) {
        Command = ref[i];
        this.commands.register(Command);
      }
      ref1 = pack.prototype.Hotkeys || [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        ref2 = ref1[j], key = ref2[0], handler = ref2[1];
        this.hotkeys.registerCommandHotkey(key, handler);
      }
      ref3 = pack.prototype.Decorations || [];
      for (k = 0, len2 = ref3.length; k < len2; k++) {
        Dec = ref3[k];
        if (Dec instanceof COMDecoration.DecorationMaintainer) {
          this.namespace.registerDecoration(Dec);
        } else if (Dec.prototype instanceof COMDecoration.DecorationMaintainer) {
          this.namespace.registerDecoration(new Dec);
        } else {
          Logger.error("Invalid decoration", Dec, "at", pack);
        }
      }
      ref4 = pack.prototype.Runes || [];
      for (l = 0, len3 = ref4.length; l < len3; l++) {
        Rune = ref4[l];
        this.namespace.registerNode(Rune);
      }
      ref5 = pack.prototype.Spells || [];
      for (m = 0, len4 = ref5.length; m < len4; m++) {
        Spell = ref5[m];
        this.namespace.registerSpell(Spell);
      }
      ref6 = pack.prototype.Elements || [];
      for (n = 0, len5 = ref6.length; n < len5; n++) {
        Element = ref6[n];
        this.namespace.registerNode(Element);
      }
      ref7 = pack.prototype.Composers || [];
      for (o = 0, len6 = ref7.length; o < len6; o++) {
        Composer = ref7[o];
        if (Composer instanceof COM.COMComposer) {
          this.namespace.registerComposer(Composer);
        } else if (Composer.prototype instanceof COMComposer) {
          this.namespace.registerComposer(new Composer());
        } else {
          Logger.error("Invalid composer", Composer, "at", pack);
        }
      }
      ref8 = pack.prototype.Intents || [];
      results = [];
      for (p = 0, len7 = ref8.length; p < len7; p++) {
        Intent = ref8[p];
        results.push(COM.COMIntent.register(Intent, Intent.name || Intent.prototype.name));
      }
      return results;
    };

    return Editor;

  })(Leaf.Widget);

  NextRenderAware = (function(superClass) {
    extend(NextRenderAware, superClass);

    function NextRenderAware() {
      return NextRenderAware.__super__.constructor.apply(this, arguments);
    }

    NextRenderAware.prototype.nextRenderCallback = null;

    NextRenderAware.prototype.initialize = function() {
      this.nextRenderCallback = SharedCallbacks.create();
      return this.listenBy(NextRenderAware, "afterRender", (function(_this) {
        return function() {
          return _this.nextRenderCallback();
        };
      })(this));
    };

    NextRenderAware.prototype.nextRender = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.nextRenderCallback.push(callback);
    };

    return NextRenderAware;

  })(Leaf.Trait);

  module.exports = Editor;

}).call(this);
