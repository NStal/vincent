// Generated by CoffeeScript 1.10.0
(function() {
  var Code, LatexPackage, MathJaxAdapter, latexKeywords,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MathJaxAdapter = require("/component/mathJaxAdapter");

  latexKeywords = require("./lib/latexKeywords");

  Code = require("../code.package/element.code");

  module.exports = LatexPackage = (function(superClass) {
    extend(LatexPackage, superClass);

    LatexPackage.prototype.name = "Latex";

    LatexPackage.prototype.Elements = [require("./element.latex"), require("./element.latexCode")];

    LatexPackage.prototype.Runes = [require("./rune.latexRune")];

    LatexPackage.prototype.Commands = require("./commands");

    LatexPackage.prototype.Hotkeys = require("./hotkeys");

    LatexPackage.prototype.Spells = [require("./spell.latexBlockHead"), require("./spell.latexBlockTail"), require("./spell.latexSpell")];

    LatexPackage.prototype.Composers = [require("./composer.latexRetainer"), require("./composer.richTextToLatex")];

    LatexPackage.prototype.requires = ["AutoCompleter", "RuneTyper", "Code", "CodeEnhancement", "RuneEntryMenu"];

    function LatexPackage() {
      this.adapter = new MathJaxAdapter;
    }

    LatexPackage.prototype.onContextCreate = function(context) {
      return context.facilities.latex = this;
    };

    LatexPackage.prototype.renderTexElement = function(el, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.adapter.render(el, callback);
    };

    LatexPackage.prototype.init = function(editor, deps) {
      this.editor = editor;
      this.deps = deps;
      LatexPackage.__super__.init.call(this, this.editor, this.deps);
      this.deps.RuneEntryMenu.register(this, {
        name: "Latex",
        description: "You can also type @latex or $$Math$$ to insert a math block",
        icon: "fa-superscript"
      }, (function(_this) {
        return function(buffer, context) {
          return context.transact(function() {
            var latex;
            latex = context.createElement("LatexRune", {
              text: ""
            });
            buffer.cursor.target.insertRune(buffer.cursor.anchor.index, latex);
            return latex.trigger();
          });
        };
      })(this));
      this.deps.RuneTyper.register({
        content: "@latex",
        type: "rune",
        description: "Add some Math or {$0}",
        descriptionRunes: [
          {
            type: "LatexRune",
            latex: "\\rm\\LaTeX"
          }
        ],
        create: (function(_this) {
          return function() {
            var rune;
            rune = _this.editor.context.createElement("LatexRune", {
              latex: ""
            });
            return rune;
          };
        })(this),
        postAction: function(rune) {
          rune.edit();
        }
      });
      this.deps.RuneTyper.register({
        content: "$$latex$$",
        type: "rune",
        description: "Add some Math or {$0}",
        descriptionRunes: [
          {
            type: "LatexRune",
            latex: "\\rm\\LaTeX"
          }
        ],
        create: (function(_this) {
          return function() {
            var rune;
            rune = _this.editor.context.createElement("LatexRune", {
              latex: ""
            });
            return rune;
          };
        })(this),
        postAction: function(rune) {
          rune.edit();
        }
      });
      return Code.registerLanguageHighlight("latex", this.deps.CodeEnhancement.prepare([
        {
          type: "math",
          name: "builtin",
          source: "(?:" + latexKeywords.map(function(item) {
            return "\\\\" + item;
          }).join("|") + ")"
        }, {
          type: "math",
          name: "symbol",
          source: "[\\^_~&]"
        }, {
          type: "math",
          name: "symbol",
          source: "\\\\\\\\"
        }
      ]));
    };

    return LatexPackage;

  })(Vincent.Package);

}).call(this);
