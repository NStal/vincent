// Generated by CoffeeScript 1.10.0
(function() {
  var COMSpell, COMVisualPosition, Decoration, LatexSpell,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  COMSpell = COM.COMSpell;

  Decoration = COM.COMDecoration;

  COMVisualPosition = require("/vincent/com/visualPosition");

  LatexSpell = (function(superClass) {
    var LatexView, reg;

    extend(LatexSpell, superClass);

    reg = /\$\$([^$\n\r]|\\\$)*[^\\$\r\n]\$\$/;

    LatexView = (function(superClass1) {
      extend(LatexView, superClass1);

      function LatexView(latexSpell) {
        this.latexSpell = latexSpell;
        this.template = "<latex-spell class=\"com com-latex com-text com-block-like\" data-class=\"error,empty\"><div data-id=\"renderer\" class=\"latex-renderer com-block-like-renderer\"></div><div data-id=\"texts\" class=\"com-block-like-texts\"></div></latex-spell>";
        LatexView.__super__.constructor.call(this);
      }

      LatexView.prototype.render = function(content) {
        if (this.cacheTex === content) {
          return;
        }
        this.UI.renderer.textContent = "$" + content + "$";
        return this.latexSpell.context.facilities.latex.renderTexElement(this.UI.renderer, (function(_this) {
          return function() {
            _this.latexSpell.context.castIntent("RenderIntent");
            return _this.cacheTex = content;
          };
        })(this));
      };

      return LatexView;

    })(Leaf.Widget);

    LatexSpell.prototype.type = "LatexSpell";

    LatexSpell.prototype.test = function(contentString) {
      var match;
      if (contentString == null) {
        contentString = "";
      }
      match = contentString.match(reg);
      if (match) {
        return {
          start: match.index,
          end: match.index + match[0].length,
          match: match
        };
      }
      return null;
    };

    function LatexSpell() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.appearance == null) {
        this.appearance = {
          tagName: "code",
          classList: ["com", "com-latex", "com-text"]
        };
      }
      LatexSpell.__super__.constructor.apply(this, args);
      this.leftCaretPriority = 1;
      this.rightCaretPriority = 1;
      this.withHolder = true;
    }

    LatexSpell.prototype.parse = function() {
      return null;
    };

    LatexSpell.prototype.getOffsetByDOM = function(node, offset) {
      var ref;
      if (node === ((ref = this.cache) != null ? ref.renderer : void 0)) {
        return {
          index: this.length - 1,
          inside: false
        };
      }
      return null;
    };

    LatexSpell.prototype.specifyTextContainer = function() {
      return this.cache.view.UI.texts;
    };

    LatexSpell.prototype.customBaseRender = function() {
      var base;
      if ((base = this.cache).view == null) {
        base.view = new LatexView(this);
      }
      this.cache.renderer = this.cache.view.UI.renderer;
      this.cache.view.UI.texts.innerHTML = "";
      return this.el = this.cache.view.node;
    };

    LatexSpell.prototype.render = function() {
      var args, content, view;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      content = this.contentString.slice(2, -2);
      LatexSpell.__super__.render.apply(this, args);
      view = this.cache.view;
      if (/^\s*$/.test(content)) {
        return view.VM.empty = true;
      } else {
        view.VM.empty = false;
        return view.render(content);
      }
    };

    LatexSpell.prototype.compose = function() {
      var match;
      match = this.contentString.match(reg);
      if (!match || match.index !== 0 || match[0].length !== this.length) {
        this.toNormalTextInPlace();
        this.dirty = true;
        return true;
      }
      return false;
    };

    return LatexSpell;

  })(COMSpell);

  module.exports = LatexSpell;

}).call(this);
