// Generated by CoffeeScript 1.10.0
(function() {
  var CodeLine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  module.exports = CodeLine = (function(superClass) {
    var CodeLineView;

    extend(CodeLine, superClass);

    CodeLineView = (function(superClass1) {
      extend(CodeLineView, superClass1);

      function CodeLineView() {
        this.template = "<codeline class=\"com com-text codeline\"><div data-id=\"lineNumber\" class=\"line-number\" data-text=\"lineNumber\">1</div><div class=\"text-wrapper\"><div data-id=\"texts\" class=\"texts\"></div></div></codeline>";
        CodeLineView.__super__.constructor.call(this);
      }

      return CodeLineView;

    })(Leaf.Widget);

    CodeLine.prototype.type = "CodeLine";

    CodeLine.prototype.test = function() {
      return null;
    };

    function CodeLine() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.withDecoration = true;
      this.keepNewlineSpace = false;
      CodeLine.__super__.constructor.apply(this, args);
      this.decorationPolicy.behave({
        behavior: "default"
      });
      this.leftCaretPriority = 0;
      this.rightCaretPriority = 1;
    }

    CodeLine.prototype.getEmptyBorder = function() {
      var child, i, index, len, ref, targetIndex;
      targetIndex = -1;
      ref = this.cache.view.UI.texts.parentElement.children;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        child = ref[index];
        if (child === this.cache.view.UI.texts) {
          targetIndex = index;
        }
      }
      if (targetIndex < 0) {
        return null;
      }
      return new COM.COMVisualPosition.COMVisualBorder({
        node: this.cache.view.UI.texts.parentElement,
        offset: targetIndex,
        position: "left",
        priority: this.leftCaretPriority
      });
    };

    CodeLine.prototype.compose = function() {
      return false;
    };

    CodeLine.prototype.customBaseRender = function() {
      var base;
      if ((base = this.cache).view == null) {
        base.view = new CodeLineView();
      }
      return this.el = this.cache.view.node;
    };

    CodeLine.prototype.specifyTextContainer = function() {
      return this.cache.view.UI.texts;
    };

    CodeLine.prototype.render = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.cache.lastCs === this.contentString && this.lineNumber === this.lastLineNumber) {
        return;
      }
      CodeLine.__super__.render.apply(this, args);
      this.cache.view.UI.lineNumber.textContent = this.lineNumber;
      this.cache.lastCs = this.contentString;
      this.cache.lineNumber = this.lastLineNumber;
      if (this.contentString === "") {
        return (ref = this.specifyTextContainer()) != null ? ref.textContent = " " : void 0;
      }
    };

    return CodeLine;

  })(COM.COMSpell);

}).call(this);
