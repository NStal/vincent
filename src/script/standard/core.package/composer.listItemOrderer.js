// Generated by CoffeeScript 1.10.0
(function() {
  var Composer, ListItemOrderer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Composer = require("../helper/composerUtils");

  module.exports = ListItemOrderer = (function(superClass) {
    extend(ListItemOrderer, superClass);

    function ListItemOrderer() {
      return ListItemOrderer.__super__.constructor.apply(this, arguments);
    }

    ListItemOrderer.prototype.type = "ListItem";

    ListItemOrderer.prototype.exec = function() {
      var _i, changed, currentIndent, i, indent, index, item, lastIndent, len, next, offset, prefix, prefixDecorator, prev, previous, sequence, stack, targetHasOrder;
      prefix = this.target.getHeadPrefix();
      if (this.cache.listHeadPrefix === prefix && this.cache.listHeadIndent === this.target.getIndentLevel()) {
        return false;
      }
      this.cache.listHeadPrefix = prefix;
      currentIndent = this.target.getIndentLevel();
      sequence = [];
      stack = [];
      previous = this.target;
      while (previous = previous.previous()) {
        if (!previous.sortOf("ListItem")) {
          break;
        }
        sequence.unshift(previous);
      }
      sequence.push(this.target);
      next = this.target;
      while (next = next.next()) {
        if (!next.sortOf("ListItem")) {
          break;
        }
        sequence.push(next);
      }
      lastIndent = null;
      targetHasOrder = this.target.getType() === "order";
      if (sequence.length === 1) {
        return false;
      }
      if (targetHasOrder) {
        prefixDecorator = this.target.getPrefixDecorator();
      } else {
        prefixDecorator = ".";
      }
      for (_i = i = 0, len = sequence.length; i < len; _i = ++i) {
        item = sequence[_i];
        prev = sequence[_i - 1] || null;
        currentIndent = item.getIndentLevel();
        if (stack.length === 0) {
          stack.push(-1);
          lastIndent = currentIndent;
        }
        indent = currentIndent;
        while (indent > lastIndent) {
          indent--;
          stack.push(-1);
        }
        indent = currentIndent;
        while (indent < lastIndent) {
          indent++;
          stack.pop();
        }
        if (stack.length === 0) {
          stack.push(-1);
        }
        lastIndent = currentIndent;
        if (item.getType() === "order") {
          offset = stack[stack.length - 1];
          if (offset < 0) {
            offset = item.getOrderIndex();
            stack[stack.length - 1] = offset;
            if (sequence.length !== 2 || prev) {
              stack[stack.length - 1] = 1;
            }
          }
          index = stack[stack.length - 1]++;
          prefix = index + prefixDecorator;
          if (item.getHeadPrefix() === prefix) {
            continue;
          }
          item.setHeadPrefix(prefix);
          item.composerBuffer.listHeadPrefix = prefix;
          item.composerBuffer.listHeadIndent = currentIndent;
          if (item === this.target) {
            changed = true;
          }
        } else {
          continue;
        }
      }
      return changed;
    };

    return ListItemOrderer;

  })(Composer.COMComposer);

}).call(this);
