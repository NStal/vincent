// Generated by CoffeeScript 1.10.0
(function() {
  var COMSpell, Decoration, ReferenceSpell,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  COMSpell = require("/vincent/com/spell");

  Decoration = require("/vincent/com/decoration");

  ReferenceSpell = (function(superClass) {
    var DM, dm, reg;

    extend(ReferenceSpell, superClass);

    reg = /\[.*\]\[[^\]\n\[]*\]/;

    DM = Decoration.createRegExpMaintainer("ReferenceQuoteDecoration", /(?:\[)|(?:\]\[.*\])/g, ["edit-decoration"]);

    dm = new DM;

    ReferenceSpell.prototype.type = "ReferenceSpell";

    ReferenceSpell.prototype.test = function(contentString) {
      var match;
      if (contentString == null) {
        contentString = "";
      }
      match = contentString.match(reg);
      if (match) {
        return {
          start: match.index,
          end: match.index + match[0].length,
          match: match
        };
      }
      return null;
    };

    function ReferenceSpell() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.appearance == null) {
        this.appearance = {
          tagName: "a",
          classList: ["com", "com-reference", "com-text"]
        };
      }
      ReferenceSpell.__super__.constructor.apply(this, args);
      this.addDecorationMaintainer(dm);
      this.setDecorations();
      this.decorationPolicy.behave({
        behavior: "default"
      });
    }

    ReferenceSpell.prototype.render = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return ReferenceSpell.__super__.render.apply(this, args);
    };

    ReferenceSpell.prototype.compose = function() {
      var match;
      match = this.contentString.match(reg);
      if (!match || match.index !== 0 || match[0].length !== this.length) {
        this.toNormalTextInPlace();
        this.dirty = true;
        return true;
      }
      return false;
    };

    ReferenceSpell.prototype.trigger = function() {
      return false;
    };

    return ReferenceSpell;

  })(COMSpell);

  module.exports = ReferenceSpell;

}).call(this);
