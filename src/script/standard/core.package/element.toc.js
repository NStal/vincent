// Generated by CoffeeScript 1.10.0
(function() {
  var COMRichText, COMSpell, Decoration, Toc, TocView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Decoration = COM.COMDecoration;

  COMRichText = COM.COMRichText;

  COMSpell = COM.COMSpell;

  TocView = (function(superClass) {
    extend(TocView, superClass);

    function TocView(toc) {
      var template;
      this.toc = toc;
      template = "<div class=\"com com-rich-text com-toc-block\"><div data-id=\"container\" class=\"container\"></div><div data-id=\"titles\" class=\"toc-renderer\"></div></div>";
      TocView.__super__.constructor.call(this, template);
      this.toc.listenBy(this, "enable", (function(_this) {
        return function() {
          return _this.attach();
        };
      })(this));
      this.toc.listenBy(this, "disable", (function(_this) {
        return function() {
          return _this.detach();
        };
      })(this));
    }

    TocView.prototype.attach = function() {
      if (this.headlines) {
        this.headlines.stopListenBy(this);
      }
      this.headlines = this.toc.context.get("headlines");
      return this.headlines.listenBy(this, "change", (function(_this) {
        return function() {
          _this.headlines.sort();
          return _this.update();
        };
      })(this));
    };

    TocView.prototype.detach = function() {
      return this.headlines.stopListenBy(this);
    };

    TocView.prototype.update = function() {};

    return TocView;

  })(Leaf.Widget);

  Toc = (function(superClass) {
    extend(Toc, superClass);

    Toc.prototype.type = "Toc";

    Toc.prototype.mime = "text/plain";

    Toc.prototype.isSingleLine = true;

    function Toc() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.appearance = {
        tagName: "code",
        classList: ["com", "com-rich-text", "com-toc-block"]
      };
      this.childNoTailingBoundary = true;
      Toc.__super__.constructor.apply(this, args);
      this.decorationMaintainers = [];
      this.layout = "block";
      this.composePolicy.behave({
        borrow: true,
        lend: false,
        tailingNewline: true
      });
    }

    Toc.prototype.customBaseRender = function() {
      var i, item, len, ref, ref1;
      if (!this.cache.view) {
        this.cache.view = new TocView(this);
        this.cache.view.attach();
      }
      this.el = this.cache.view.node;
      this.el.com = this;
      ref1 = ((ref = this.appearance) != null ? ref.classList : void 0) || [];
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        this.el.classList.add(item);
      }
      return true;
    };

    Toc.prototype.onRootAvailable = function() {
      var count;
      Toc.__super__.onRootAvailable.call(this);
      this.emit("enable");
      count = (this.context.get("tocCount")) || 0;
      count += 1;
      return this.context.set("tocCount", count);
    };

    Toc.prototype.onRootDispel = function() {
      var count;
      Toc.__super__.onRootDispel.call(this);
      this.emit("disable");
      count = (this.context.get("tocCount")) || 0;
      count -= 1;
      if (count < 0) {
        count = 0;
      }
      return this.context.set("tocCount", count);
    };

    Toc.prototype.specifyDomContainer = function() {
      return this.domContainer = this.cache.view.UI.container;
    };

    Toc.prototype.render = function() {
      return Toc.__super__.render.call(this);
    };

    return Toc;

  })(COMRichText);

  module.exports = Toc;

}).call(this);
