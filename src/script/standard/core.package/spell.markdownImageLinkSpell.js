// Generated by CoffeeScript 1.10.0
(function() {
  var MarkdownImageLinkSpell, MarkdownImageSpell, SmartImage,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  MarkdownImageSpell = require("./spell.markdownImageSpell");

  SmartImage = require("/widget/smartImage");

  MarkdownImageLinkSpell = (function(superClass) {
    var ImageLinkView, reg;

    extend(MarkdownImageLinkSpell, superClass);

    reg = /\[\!\[([^\[\]]*)\]\(([^\(\)\n]*)\)\]\(([^\(\)\n ]*)( [^\)\n]*)?\)/;

    ImageLinkView = (function(superClass1) {
      extend(ImageLinkView, superClass1);

      function ImageLinkView(renderContext) {
        this.renderContext = renderContext;
        this.include(SmartImage);
        this.template = "<inline-image-link target=\"_blank\" class=\"com com-markdown-image-link com-text com-block-like\" data-class=\"state\"><a data-id=\"link\" target=\"_blank\"><smart-image data-id=\"renderer\" class=\"image-renderer com-block-like-renderer\"></smart-image></a><div data-id=\"texts\" class=\"com-block-like-texts com-no-trigger print-not\"></div></inline-image-link>";
        ImageLinkView.__super__.constructor.call(this);
        this.UI.renderer.on("state", (function(_this) {
          return function(state) {
            _this.renderContext.emit("resize");
            if (state === "failed") {
              return _this.VM.state = "error";
            } else {
              return _this.VM.state = state;
            }
          };
        })(this));
      }

      return ImageLinkView;

    })(Leaf.Widget);

    MarkdownImageLinkSpell.prototype.test = function(contentString) {
      var match;
      if (contentString == null) {
        contentString = "";
      }
      match = contentString.match(reg);
      if (match) {
        return {
          start: match.index,
          end: match.index + match[0].length,
          match: match
        };
      }
      return null;
    };

    MarkdownImageLinkSpell.prototype.type = "MarkdownImageLinkSpell";

    function MarkdownImageLinkSpell(context, option) {
      this.context = context;
      this.option = option != null ? option : {};
      if (this.appearance == null) {
        this.appearance = {
          tagName: "a",
          classList: ["com", "com-text", "com-markdown-image", "com-markdown-image-link"]
        };
      }
      MarkdownImageLinkSpell.__super__.constructor.call(this, this.context, this.option);
    }

    MarkdownImageLinkSpell.prototype.customBaseRender = function() {
      var base;
      if ((base = this.cache).view == null) {
        base.view = new ImageLinkView(this.rc);
      }
      this.cache.renderer = this.cache.view.UI.renderer;
      this.cache.view.UI.texts.innerHTML = "";
      return this.el = this.cache.view.node;
    };

    MarkdownImageLinkSpell.prototype.render = function() {
      var args, view;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      MarkdownImageLinkSpell.__super__.render.apply(this, args);
      view = this.cache.view;
      if (this.url) {
        return view.UI.link.setAttribute("href", this.url);
      } else {
        return view.UI.link.setAttribute("href", "#");
      }
    };

    MarkdownImageLinkSpell.prototype.parse = function() {
      var _, match, ref, ref1, title;
      match = this.contentString.match(reg);
      if (!match) {
        return;
      }
      _ = match[0], this.alt = match[1], this.src = match[2], this.url = match[3], this.title = match[4];
      if (title) {
        title = title.trim();
        if ((ref = title[0]) === "\"" || ref === "'") {
          title = title.slice(1);
        }
        if ((ref1 = title[title.length - 1]) === "\"" || ref1 === "'") {
          title = title.slice(0, -1);
        }
        if (title !== this.title) {
          this.title = title;
        }
      }
      return this.url;
    };

    MarkdownImageLinkSpell.prototype.compose = function() {
      var match;
      match = this.contentString.match(reg);
      if (!match || match.index !== 0 || match[0].length !== this.length) {
        this.toNormalTextInPlace();
        this.dirty = true;
        return true;
      }
      this.parse();
      return false;
    };

    return MarkdownImageLinkSpell;

  })(MarkdownImageSpell);

  module.exports = MarkdownImageLinkSpell;

}).call(this);
