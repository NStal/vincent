// Generated by CoffeeScript 1.10.0
(function() {
  var COMRichText, Divider, DividerView,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  COMRichText = COM.COMRichText;

  DividerView = (function(superClass) {
    extend(DividerView, superClass);

    function DividerView(divider) {
      var template;
      this.divider = divider;
      template = "<div class=\"com com-rich-text com-divider-block\"><div data-id=\"container\" class=\"container\"></div><div data-id=\"titles\" class=\"divider-renderer\"></div></div>";
      DividerView.__super__.constructor.call(this, template);
    }

    return DividerView;

  })(Leaf.Widget);

  Divider = (function(superClass) {
    extend(Divider, superClass);

    Divider.prototype.type = "Divider";

    Divider.prototype.mime = "text/plain";

    function Divider() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.appearance = {
        tagName: "code",
        classList: ["com", "com-rich-text", "com-divider-block"]
      };
      this.childNoTailingBoundary = true;
      Divider.__super__.constructor.apply(this, args);
      this.decorationMaintainers = [];
      this.layout = "block";
      this.composePolicy.behave({
        borrow: true,
        lend: false,
        tailingNewline: true
      });
      this.layout = "block";
      return this;
    }

    Divider.prototype.isSingleLine = true;

    Divider.prototype.customBaseRender = function() {
      var i, item, len, ref, ref1;
      if (!this.cache.view) {
        this.cache.view = new DividerView(this);
      }
      this.el = this.cache.view.node;
      this.el.com = this;
      ref1 = ((ref = this.appearance) != null ? ref.classList : void 0) || [];
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        this.el.classList.add(item);
      }
      return true;
    };

    Divider.prototype.specifyDomContainer = function() {
      return this.domContainer = this.cache.view.UI.container;
    };

    Divider.prototype.render = function() {
      return Divider.__super__.render.call(this);
    };

    return Divider;

  })(COMRichText);

  module.exports = Divider;

}).call(this);
