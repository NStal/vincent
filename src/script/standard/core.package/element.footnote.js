// Generated by CoffeeScript 1.10.0
(function() {
  var COMRichText, COMSpell, Decoration, Footnote, FootnoteHead,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  COMRichText = COM.COMRichText;

  Footnote = (function(superClass) {
    extend(Footnote, superClass);

    Footnote.prototype.type = "Footnote";

    function Footnote(context, data) {
      this.context = context;
      this.data = data != null ? data : {};
      this.appearance = {
        tagName: "div",
        classList: ["com", "com-rich-text", "com-footnote"]
      };
      this.privateSpells = [FootnoteHead];
      Footnote.__super__.constructor.call(this, this.context, this.data);
      this.composePolicy.behave({
        borrow: true,
        lend: false,
        tailingNewline: true
      });
      this.layout = "block";
    }

    Footnote.prototype.onRootAvailable = function() {
      return Footnote.__super__.onRootAvailable.call(this);
    };

    Footnote.prototype.onRootDispel = function() {
      return Footnote.__super__.onRootDispel.call(this);
    };

    return Footnote;

  })(COMRichText);

  COMSpell = COM.COMSpell;

  Decoration = COM.COMDecoration;

  FootnoteHead = (function(superClass) {
    var DM, dm, reg;

    extend(FootnoteHead, superClass);

    reg = /^\s*\[\^?[^\[\]\n]*\]/;

    DM = Decoration.createRegExpMaintainer("ReferenceQuoteDecoration", /(?:^\[\^?)|(?:\]$)/g, ["edit-decoration"]);

    dm = new DM;

    FootnoteHead.prototype.type = "FootnoteHead";

    FootnoteHead.prototype.render = function(rc) {
      return FootnoteHead.__super__.render.call(this, rc);
    };

    FootnoteHead.prototype.test = function(contentString) {
      var match;
      if (contentString == null) {
        contentString = "";
      }
      match = contentString.match(reg);
      if (match) {
        return {
          start: match.index,
          end: match.index + match[0].length,
          match: match
        };
      }
      return null;
    };

    function FootnoteHead(context, option) {
      this.context = context;
      this.option = option != null ? option : {};
      this.noEyeCatching = true;
      if (this.appearance == null) {
        this.appearance = {
          tagName: "span",
          classList: ["com", "com-footnote-head", "com-text"]
        };
      }
      FootnoteHead.__super__.constructor.call(this, this.context, this.option);
      this.addDecorationMaintainer(dm);
      this.setDecorations();
      this.decorationPolicy.behave({
        behavior: "break"
      });
      this.noTailingBoundary = true;
    }

    FootnoteHead.prototype.compose = function() {
      if (!reg.test(this.contentString)) {
        Logger.error("note pass");
        debugger;
      }
      if (FootnoteHead.__super__.compose.call(this)) {
        return true;
      }
      this.acknowledge();
      return false;
    };

    FootnoteHead.prototype.acknowledge = function() {
      var match, referenceText, result;
      result = this.contentString.match(reg);
      if (!result) {
        throw new Error("logic error, unexpected unmatch of " + this.contentString);
        return;
      }
      match = result[0].match(/\[\^?(.*)\]/);
      if (!match) {
        return;
      }
      referenceText = match[1];
      if (this.referenceText !== referenceText) {
        this.referenceText = referenceText;
        return this.dirty = true;
      }
    };

    return FootnoteHead;

  })(COMSpell);

  module.exports = Footnote;

}).call(this);
