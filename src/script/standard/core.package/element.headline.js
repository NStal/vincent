// Generated by CoffeeScript 1.10.0
(function() {
  var COMNodeList, COMOperation, COMRichText, COMSpell, CollapseHeadContentOperation, ExpandHeadContentOperation, Headline, HeadlineHead, TitleMaintainer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  COMNodeList = COM.COMNodeList;

  COMRichText = COM.COMRichText;

  COMSpell = COM.COMSpell;

  COMOperation = COM.COMOperation;

  HeadlineHead = (function(superClass) {
    var reg;

    extend(HeadlineHead, superClass);

    reg = /^\s*#{1,6} /;

    HeadlineHead.prototype.type = "HeadlineHead";

    HeadlineHead.prototype.render = function(rc) {
      return HeadlineHead.__super__.render.call(this, rc);
    };

    HeadlineHead.prototype.test = function(contentString) {
      var match;
      if (contentString == null) {
        contentString = "";
      }
      match = contentString.match(reg);
      if (match) {
        return {
          start: match.index,
          end: match.index + match[0].length,
          match: match
        };
      }
      this.noTailingBoundary = true;
      return null;
    };

    function HeadlineHead(context1, option1) {
      this.context = context1;
      this.option = option1 != null ? option1 : {};
      this.noEyeCatching = true;
      if (this.appearance == null) {
        this.appearance = {
          tagName: "span",
          classList: ["com", "com-headline-head", "com-text"]
        };
      }
      HeadlineHead.__super__.constructor.call(this, this.context, this.option);
    }

    HeadlineHead.prototype.compose = function() {
      var ref, retain;
      if (HeadlineHead.__super__.compose.call(this)) {
        return true;
      }
      retain = /^\s*#{1,6} $/;
      if (!retain.test(this.contentString)) {
        this.toNormalTextInPlace();
        this.dirty = true;
        if ((ref = this.parent) != null) {
          ref.dirty = true;
        }
        return true;
      }
      this.acknowledge();
      return false;
    };

    HeadlineHead.prototype.acknowledge = function() {
      var level, result;
      result = this.contentString.match(reg);
      if (!result) {
        throw new Error("logic error, unexpected unmatch of " + this.contentString);
        return;
      }
      level = result[0].replace(/\s/g, "").length;
      if (this.level !== level) {
        this.parent.setLevel(level);
        this.dirty = true;
      }
      return this.level = level;
    };

    return HeadlineHead;

  })(COMSpell);

  Headline = (function(superClass) {
    extend(Headline, superClass);

    Headline.initContext = function(context) {
      var list;
      context.setMeta("title", "");
      if (!context.get("headlines")) {
        context.set("headlines", list = new COMNodeList());
        return context.set("titleMaintainer", new TitleMaintainer(context, list));
      }
    };

    Headline.prototype.type = "Headline";

    Headline.prototype.isSingleLine = true;

    Headline.prototype.getPrefix = function() {
      var match;
      match = this.contentString.match(/^\s*#+ +/);
      return match[0];
    };

    Headline.prototype.toPlainString = function() {
      var string;
      string = Headline.__super__.toPlainString.call(this);
      return string.replace(/^\s*#+\s+/, "").trim();
    };

    Headline.prototype.getTitle = function() {
      return this.toPlainString();
    };

    function Headline(context1, data) {
      var i, item, len, ref;
      this.context = context1;
      this.data = data != null ? data : {};
      this.appearance = {
        tagName: "h1",
        classList: ["com", "com-rich-text", "com-headline", "com-el-single-line"]
      };
      this.privateSpells = [HeadlineHead];
      Headline.__super__.constructor.call(this, this.context, this.data);
      this.isCollapsed = false;
      this.collapseHeadContents = [];
      this.level = this.data.level || 1;
      if (this.data.collapseHeadContents && this.data.collapseHeadContents.length > 0) {
        ref = this.data.collapseHeadContents;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          this.collapseHeadContents.push(this.context.createElement(item));
        }
        this.isCollapsed = true;
      }
      this.composePolicy.behave({
        borrow: true,
        lend: false,
        tailingNewline: true
      });
      this.layout = "block";
    }

    Headline.prototype.onRootAvailable = function() {
      var list;
      Headline.__super__.onRootAvailable.call(this);
      if (!(list = this.context.get("headlines"))) {
        return;
      }
      return list.add(this);
    };

    Headline.prototype.onRootDispel = function() {
      var list;
      Headline.__super__.onRootDispel.call(this);
      if (!(list = this.context.get("headlines"))) {
        return;
      }
      return list.remove(this);
    };

    Headline.prototype.clone = function() {
      var item, result;
      result = Headline.__super__.clone.call(this);
      if (!result) {
        return result;
      }
      if (this.isCollapsed) {
        result.isCollapsed = this.isCollapsed;
        result.collapseHeadContents = (function() {
          var i, len, ref, results1;
          ref = this.collapseHeadContents;
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            results1.push(item.clone());
          }
          return results1;
        }).call(this);
      }
      return result;
    };

    Headline.prototype.slice = function(option) {
      var slice;
      slice = Headline.__super__.slice.call(this, option);
      if (!slice) {
        return null;
      }
      if (slice.isPartial && !slice.looseComplete) {
        return slice;
      }
      return this.clone();
    };

    Headline.prototype.toHumanString = function(option) {
      var i, item, len, ref, result;
      if (option == null) {
        option = {};
      }
      result = [Headline.__super__.toHumanString.call(this)];
      if (this.isCollapsed && !option.noRecursive) {
        ref = this.collapseHeadContents;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          result.push(item.toHumanString());
        }
      }
      return result.join("");
    };

    Headline.prototype.toJSON = function(option) {
      var i, item, json, len, ref, results;
      json = Headline.__super__.toJSON.call(this, option);
      if (!json) {
        return null;
      }
      json.level = this.level;
      if (this.isCollapsed) {
        json.isCollapsed = true;
        results = [];
        ref = this.collapseHeadContents;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(item.toJSON());
        }
        json.collapseHeadContents = results;
      }
      return json;
    };

    Headline.prototype.render = function(rc) {
      var classList, i, item, len;
      if (this.isCollapsed) {
        this.forceHolder = true;
        this.placeholder = "...";
      } else {
        this.forceHolder = false;
        this.placeholder = "";
      }
      Headline.__super__.render.call(this, rc);
      classList = (function() {
        var i, len, ref, results1;
        ref = this.el.classList;
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results1.push(item);
        }
        return results1;
      }).call(this);
      for (i = 0, len = classList.length; i < len; i++) {
        item = classList[i];
        if (item.indexOf("com-headline-level") === 0) {
          this.el.classList.remove(item);
        }
      }
      this.el.classList.add("com-headline-level-" + (this.level || 0));
      if (this.voidContent) {
        this.el.classList.add("void-content");
      } else {
        this.el.classList.remove("void-content");
      }
      if (this.isCollapsed) {
        return this.el.classList.add("collapsed");
      } else {
        return this.el.classList.remove("collapsed");
      }
    };

    Headline.prototype.trigger = function(option) {
      if (option == null) {
        option = {};
      }
      if (!option.force && !this.isCollapsed && option.via !== "tap") {
        return false;
      }
      if (this.isCollapsed) {
        return this.expand();
      } else {
        return this.collapse();
      }
      return false;
    };

    Headline.prototype.collapse = function() {
      var i, item, items, len, next, target;
      if (this.isCollapsed) {
        return false;
      }
      target = this;
      items = [];
      while (true) {
        next = target.next();
        if (!next) {
          break;
        }
        if (!next.sortOf("Headline") || next.level > this.level) {
          items.push(next);
          target = next;
          continue;
        }
        break;
      }
      if (items.length === 0) {
        return false;
      }
      this.context.operate(new CollapseHeadContentOperation(this.context, this, {
        items: items
      }));
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        item.remove();
      }
      return true;
    };

    Headline.prototype.expand = function() {
      var i, item, items, len;
      if (!this.isCollapsed) {
        return false;
      }
      items = this.collapseHeadContents.slice();
      items.reverse();
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        this.after(item);
      }
      this.context.operate(new ExpandHeadContentOperation(this.context, this, {}));
      return true;
    };

    Headline.prototype.toContentString = function() {
      var after, i, item, len, ref;
      if (!this.isCollapsed) {
        return this.contentString;
      }
      after = "";
      ref = this.collapseHeadContents;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        after += item.toContentString();
      }
      return this.contentString + after;
    };

    Headline.prototype.setLevel = function(level) {
      var i, item, prefix, ref;
      if (this.level !== level) {
        this.dirty = true;
        this.level = level;
        prefix = this.getPrefix();
        this.removeText(0, prefix.length);
        prefix = "";
        for (item = i = 0, ref = this.level; 0 <= ref ? i < ref : i > ref; item = 0 <= ref ? ++i : --i) {
          prefix += "#";
        }
        prefix += " ";
        this.insertText(0, prefix);
      }
      return true;
    };

    Headline.prototype.compose = function() {
      var child, i, len, length, ref;
      if (Headline.__super__.compose.call(this)) {
        return true;
      }
      this.voidContent = false;
      ref = this.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        if (child instanceof HeadlineHead) {
          length = child.contentString.length;
          if (/^\s*$/.test(this.contentString.slice(length))) {
            this.voidContent = true;
            this.dirty = true;
          }
          break;
        }
      }
      return false;
    };

    return Headline;

  })(COMRichText);

  TitleMaintainer = (function(superClass) {
    extend(TitleMaintainer, superClass);

    function TitleMaintainer(context1, headlines) {
      this.context = context1;
      this.headlines = headlines;
      TitleMaintainer.__super__.constructor.call(this);
      this.headlines.listenBy(this, "change", (function(_this) {
        return function() {
          _this.headlines.sort();
          return _this.maintain(_this.headlines.first());
        };
      })(this));
    }

    TitleMaintainer.prototype.getTitle = function() {
      var ref;
      return ((ref = this.headline) != null ? ref.getTitle() : void 0) || null;
    };

    TitleMaintainer.prototype.maintain = function(headline) {
      if (headline === this.headline) {
        return;
      }
      if (this.headline) {
        this.headline.stopListenBy(this);
      }
      this.headline = headline;
      if (!this.headline) {
        this.setTitle("");
        return;
      }
      this.setTitle(this.headline.getTitle());
      return this.headline.listenBy(this, "pend", (function(_this) {
        return function() {
          return _this.headline.context.nextCompose(function() {
            if (_this.headline && _this.headline.root) {
              return _this.setTitle(_this.headline.getTitle());
            }
          });
        };
      })(this));
    };

    TitleMaintainer.prototype.setTitle = function(title) {
      this.context.set("title", title);
      return this.context.setMeta("title", title);
    };

    return TitleMaintainer;

  })(Leaf.EventEmitter);

  CollapseHeadContentOperation = (function(superClass) {
    extend(CollapseHeadContentOperation, superClass);

    function CollapseHeadContentOperation() {
      return CollapseHeadContentOperation.__super__.constructor.apply(this, arguments);
    }

    CollapseHeadContentOperation.prototype.name = "CollapseHeadContentOperation";

    CollapseHeadContentOperation.prototype.invoke = function() {
      this.target.collapseHeadContents = this.option.items || [];
      this.target.isCollapsed = true;
      this.target.pend();
      return true;
    };

    CollapseHeadContentOperation.prototype.revoke = function() {
      this.target.collapseHeadContents = [];
      this.target.isCollapsed = false;
      this.target.pend();
      return true;
    };

    return CollapseHeadContentOperation;

  })(COMOperation.EditOperation);

  ExpandHeadContentOperation = (function(superClass) {
    extend(ExpandHeadContentOperation, superClass);

    function ExpandHeadContentOperation() {
      return ExpandHeadContentOperation.__super__.constructor.apply(this, arguments);
    }

    ExpandHeadContentOperation.prototype.name = "ExpandHeadContentOperation";

    ExpandHeadContentOperation.prototype.invoke = function() {
      this.option.items = this.target.collapseHeadContents.slice();
      this.target.isCollapsed = false;
      this.target.collapseHeadContents = [];
      this.target.pend();
      return true;
    };

    ExpandHeadContentOperation.prototype.revoke = function() {
      this.target.isCollapsed = true;
      this.target.collapseHeadContents = this.option.items.slice();
      this.target.pend();
      return true;
    };

    return ExpandHeadContentOperation;

  })(COMOperation.EditOperation);

  module.exports = Headline;

}).call(this);
