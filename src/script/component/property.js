// Generated by CoffeeScript 1.10.0
(function() {
  var Property,
    slice = [].slice;

  Property = (function() {
    Property.define = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Property, args, function(){});
    };

    function Property(target, name) {
      this.target = target;
      this.value = this.target[name];
      this.target.__defineGetter__(name, (function(_this) {
        return function() {
          if (_this.handleGet != null) {
            return _this.handleGet();
          }
          return _this.value;
        };
      })(this));
      this.target.__defineSetter__(name, (function(_this) {
        return function(value) {
          var oldValue;
          oldValue = _this.value;
          if (_this.handleBeforeSet) {
            value = _this.handleBeforeSet(value, oldValue);
          }
          _this.value = value;
          if (_this.handleAfterSet) {
            _this.handleAfterSet(value, oldValue);
          }
          return value;
        };
      })(this));
    }

    Property.prototype.get = function(handler) {
      return this.handleGet = handler;
    };

    Property.prototype.atGet = function(handler) {
      this.handleGet = handler;
      return this;
    };

    Property.prototype.beforeSet = function(handler) {
      this.handleBeforeSet = handler;
      return this;
    };

    Property.prototype.afterSet = function(handler) {
      this.handleAfterSet = handler;
      return this;
    };

    Property.prototype.define = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return Property.define.apply(Property, args);
    };

    return Property;

  })();

  module.exports = Property;

}).call(this);
