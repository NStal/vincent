// Generated by CoffeeScript 1.10.0
(function() {
  var DragEventBehavior, DragManager, DragSession, DragShadowManager, MouseEventHelper,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DragManager = (function(superClass) {
    extend(DragManager, superClass);

    function DragManager() {
      DragManager.__super__.constructor.call(this);
      this.mouseupListener = this.mouseupListener.bind(this);
      this.mousedownListener = this.mousedownListener.bind(this);
      this.mousemoveListener = this.mousemoveListener.bind(this);
      new DragEventBehavior(this);
      new DragShadowManager(this);
      new MouseEventHelper(this);
      this.init();
      this.minMovement = 6;
    }

    DragManager.prototype.init = function() {
      var capture;
      capture = true;
      window.addEventListener("mousedown", this.mouseupListener, capture);
      window.addEventListener("mouseup", this.mouseupListener, capture);
      window.addEventListener("mousemove", this.mousemoveListener, capture);
      this.reset();
      return this.setState("waitMouseDown");
    };

    DragManager.prototype.destroy = function() {
      this.reset();
      window.removeEventListener("mouseup", this.mouseupListener);
      window.removeEventListener("mousedown", this.mousedownListener);
      return window.removeEventListener("mousemove", this.mousemoveListener);
    };

    DragManager.prototype.reset = function() {
      DragManager.__super__.reset.call(this);
      return this.clearDrag();
    };

    DragManager.prototype.mouseupListener = function(e) {
      this.lastMouseEvent = e;
      return this.feed("mouse", e);
    };

    DragManager.prototype.mousedownListener = function(e) {
      this.lastMouseEvent = e;
      return this.feed("mouse", e);
    };

    DragManager.prototype.mousemoveListener = function(e) {
      this.lastMouseEvent = e;
      return this.feed("mouse", e);
    };

    DragManager.prototype.atWaitMouseDown = function() {
      this.clearDrag();
      return this.consumeWhenAvailable("mouse", (function(_this) {
        return function(e) {
          if (e.type === "mousedown") {
            _this.data.initMouseDown = e;
            return _this.setState("waitInitMouseMove");
          } else {
            return _this.setState("waitMouseDown");
          }
        };
      })(this));
    };

    DragManager.prototype.atWaitInitMouseMove = function() {
      return this.consumeWhenAvailable("mouse", (function(_this) {
        return function(e) {
          if (e.type === "mousemove") {
            if (_this.getMouseDistance(e, _this.data.initMouseDown) < _this.minMovement) {
              return _this.setState("waitInitMouseMove");
            } else {
              _this.data.initMoveEvent = e;
              return _this.setState("handleInitMove");
            }
          } else {
            return _this.setState("waitMouseDown");
          }
        };
      })(this));
    };

    DragManager.prototype.atHandleInitMove = function() {
      if (!this.dragStart(this.data.initMouseDown)) {
        this.setState("waitMouseDown");
        return;
      }
      return this.setState("waitMouseContinue");
    };

    DragManager.prototype.atWaitMouseContinue = function() {
      return this.consumeWhenAvailable("mouse", (function(_this) {
        return function(e) {
          if (e.type === "mousemove") {
            _this.dragMove(e);
            return _this.setState("waitMouseContinue");
          } else if (e.type === "mouseup") {
            _this.data.finalUpEvent = e;
            return _this.setState("handleMouseUp");
          } else {
            return _this.setState("waitMouseDown");
          }
        };
      })(this));
    };

    DragManager.prototype.atHandleMouseUp = function() {
      this.drop(this.data.finalUpEvent);
      return this.setState("waitMouseDown");
    };

    return DragManager;

  })(Leaf.States);

  MouseEventHelper = (function(superClass) {
    extend(MouseEventHelper, superClass);

    function MouseEventHelper() {
      return MouseEventHelper.__super__.constructor.apply(this, arguments);
    }

    MouseEventHelper.prototype.computeRelativeMousePosition = function(el, e) {
      var rect, src;
      src = this.getMouseSrc(e);
      if (!el.contains(src)) {
        return null;
      }
      rect = el.getBoundingClientRect();
      return {
        x: rect.left - e.clientX,
        y: rect.top - e.clientY
      };
    };

    MouseEventHelper.prototype.getMousePosition = function(e) {
      if (!e) {
        return null;
      }
      return {
        x: e.clientX,
        y: e.clientY
      };
    };

    MouseEventHelper.prototype.getMouseDistance = function(e1, e2) {
      var dx, dy, p1, p2;
      p1 = this.getMousePosition(e1);
      p2 = this.getMousePosition(e2);
      dx = p1.x - p2.x;
      dy = p1.y - p2.y;
      return Math.sqrt(dx * dx + dy * dy);
    };

    MouseEventHelper.prototype.getDefaultShadow = function(el) {
      var copy, domCopy, prop;
      domCopy = require("/component/domCopy");
      copy = domCopy(el);
      for (prop in copy.style) {
        if (!prop) {
          delete copy.style;
        }
      }
      copy.style.opacity = 0.5;
      copy.style.backgroundColor = "white";
      copy.style.pointerEvents = "none";
      copy.style.transition = "opacity 200ms";
      copy.style.webkitTransfrom = "scale(0.7)";
      window.cpyy = copy;
      return copy;
    };

    MouseEventHelper.prototype.getMouseSrc = function(e) {
      return e.srcElement || e.target;
    };

    MouseEventHelper.prototype.isElementDraggable = function(el) {
      return el && (el.dragSupport === "support" || el.getAttribute("drag-support") === "support");
    };

    MouseEventHelper.prototype.isElementDragless = function(el) {
      return !el || el.dragSupport === "disable" || el.getAttribute("drag-support") === "disable";
    };

    MouseEventHelper.prototype.getDraggable = function(e) {
      var el;
      el = this.getMouseSrc(e);
      while (el) {
        if (this.isElementDragless(el)) {
          return null;
        } else if (this.isElementDraggable(el)) {
          return el;
        }
        el = el.parentElement;
      }
    };

    MouseEventHelper.prototype.createCustomEvent = function(name, data) {
      return new CustomEvent(name, data);
    };

    return MouseEventHelper;

  })(Leaf.Trait);

  DragShadowManager = (function(superClass) {
    extend(DragShadowManager, superClass);

    function DragShadowManager() {
      return DragShadowManager.__super__.constructor.apply(this, arguments);
    }

    DragShadowManager.prototype.dragFix = {
      x: 0,
      y: 0
    };

    DragShadowManager.prototype.shadowScale = 0.7;

    DragShadowManager.prototype.clearShadow = function() {
      var ref, ref1;
      if ((ref = this.draggingShadow) != null ? ref.parentElement : void 0) {
        if ((ref1 = this.draggingShadow) != null) {
          ref1.parentElement.removeChild(this.draggingShadow);
        }
      }
      return this.draggingShadow = null;
    };

    DragShadowManager.prototype.setShadowElement = function(el, fix) {
      var base, base1, ref, ref1;
      if (fix == null) {
        fix = {};
      }
      if ((ref = this.draggingShadow) != null ? ref.parentElement : void 0) {
        if ((ref1 = this.draggingShadow) != null) {
          ref1.parentElement.removeChild(this.draggingShadow);
        }
      }
      this.draggingShadow = el;
      document.body.appendChild(el);
      el.style.position = "absolute";
      el.style.pointerEvents = "none";
      el.style.top = "0";
      el.style.left = "0";
      el.style.zIndex = 100000;
      this.dragFix = fix || {};
      if ((base = this.dragFix).x == null) {
        base.x = 0;
      }
      if ((base1 = this.dragFix).y == null) {
        base1.y = 0;
      }
      return this.updateShadowPosition();
    };

    DragShadowManager.prototype.updateShadowPosition = function() {
      var point, ref, ref1, ref2, ref3, scaleFix, transform, transformOrigin;
      if (!this.draggingShadow) {
        return;
      }
      point = this.getMousePosition(this.lastMouseEvent);
      this.shadowScale = 0.7;
      scaleFix = this.shadowScale;
      transform = "translateX(" + (point.x + this.dragFix.x * scaleFix) + "px) translateY(" + (point.y + this.dragFix.y * scaleFix) + "px) scale(" + this.shadowScale + ")";
      transformOrigin = "top left";
      if ((ref = this.draggingShadow.style) != null) {
        ref.transform = transform;
      }
      if ((ref1 = this.draggingShadow.style) != null) {
        ref1.webkitTransform = transform;
      }
      if ((ref2 = this.draggingShadow.style) != null) {
        ref2.transformOrigin = transformOrigin;
      }
      return (ref3 = this.draggingShadow.style) != null ? ref3.webkitTransformOrigin = transformOrigin : void 0;
    };

    DragShadowManager.prototype.setDraggingStyle = function() {
      if (this._setTarget) {
        this.restoreDraggingstyle();
      }
      this._setTarget = this.draggingElement;
      this._opacity = this._setTarget.style.opacity;
      this._transition = this._setTarget.style.transition;
      this._setTarget.style.opacity = 0.15;
      return this._setTarget.style.transition = "all 200ms";
    };

    DragShadowManager.prototype.restoreDraggingstyle = function() {
      var ref, ref1;
      if ((ref = this._setTarget) != null) {
        ref.style.opacity = this._opacity;
      }
      if ((ref1 = this._setTarget) != null) {
        ref1.style.transition = this._transition;
      }
      return this._setTarget = null;
    };

    return DragShadowManager;

  })(Leaf.Trait);

  DragEventBehavior = (function(superClass) {
    extend(DragEventBehavior, superClass);

    function DragEventBehavior() {
      return DragEventBehavior.__super__.constructor.apply(this, arguments);
    }

    DragEventBehavior.prototype.initialize = function() {
      var preventDefault;
      preventDefault = function(e) {
        e.preventDefault();
        return e.stopImmediatePropagation();
      };
      this.__defineGetter__("draggingElement", (function(_this) {
        return function() {
          return _this._draggingElement;
        };
      })(this));
      return this.__defineSetter__("draggingElement", (function(_this) {
        return function(v) {
          var _draggingElement;
          if (v === _this._draggingElement) {
            return;
          }
          if (_this._draggingElement) {
            _draggingElement = _this._draggingElement;
            setTimeout(function() {
              return _draggingElement.removeEventListener("click", preventDefault, true);
            }, 1);
          }
          _this._draggingElement = v;
          if (!v) {
            return;
          }
          return _this._draggingElement.addEventListener("click", preventDefault, true);
        };
      })(this));
    };

    DragEventBehavior.prototype.clearDrag = function() {
      this.clearShadow();
      this.draggingElement = null;
      return document.body.classList.remove("dragging");
    };

    DragEventBehavior.prototype.dragStart = function(e) {
      var event, src;
      src = this.getDraggable(e);
      this.clearDrag();
      if (!src) {
        return false;
      }
      document.body.classList.add("dragging");
      this.dragSession = new DragSession(this);
      this.currentDraggable = src;
      event = this.createCustomEvent("user-draginit", {
        detail: this.dragSession,
        bubbles: true
      });
      src.dispatchEvent(event);
      this.draggingElement = src;
      if (this.draggingElement.dragBehavior === "auto" || this.draggingElement.getAttribute("dragBehavior") === "auto") {
        this.shadowScale = 0.7;
        this.setDraggingStyle();
        this.setShadowElement(this.getDefaultShadow(this.draggingElement), this.computeRelativeMousePosition(src, e));
      }
      return true;
    };

    DragEventBehavior.prototype.dragMove = function(e) {
      var event, i, len, protocol, ref, ref1, target;
      event = this.createCustomEvent("user-dragging", {
        detail: this.dragSession,
        bubbles: true
      });
      if ((ref = this.draggingElement) != null) {
        ref.dispatchEvent(event);
      }
      target = this.getMouseSrc(e);
      event = this.createCustomEvent("user-dropstand", {
        detail: this.dragSession,
        bubbles: true
      });
      if (target != null) {
        target.dispatchEvent(event);
      }
      if (!event.defaultPrevented) {
        ref1 = this.dragSession.protocols;
        for (i = 0, len = ref1.length; i < len; i++) {
          protocol = ref1[i];
          event = this.createCustomEvent("user-dropstand/" + protocol.type, {
            detail: protocol,
            bubbles: true
          });
          target.dispatchEvent(event);
        }
      }
      return this.updateShadowPosition();
    };

    DragEventBehavior.prototype.drop = function(e) {
      var event, i, len, protocol, ref, ref1, target;
      this.restoreDraggingstyle();
      target = this.getMouseSrc(e);
      event = this.createCustomEvent("user-drop", {
        detail: this.dragSession,
        bubbles: true
      });
      target.dispatchEvent(event);
      if (!event.defaultPrevented) {
        ref = this.dragSession.protocols;
        for (i = 0, len = ref.length; i < len; i++) {
          protocol = ref[i];
          event = this.createCustomEvent("user-drop/" + protocol.type, {
            detail: protocol,
            bubbles: true
          });
          target.dispatchEvent(event);
        }
      }
      event = this.createCustomEvent("user-dragfinish", {
        detail: this.dragSession,
        bubbles: true
      });
      if (this.draggingElement.contains(target)) {
        e.preventDefault();
        e.stopImmediatePropagation();
      }
      if ((ref1 = this.draggingElement) != null) {
        ref1.dispatchEvent(event);
      }
      this.draggingElement = null;
      return this.clearShadow();
    };

    return DragEventBehavior;

  })(Leaf.Trait);

  DragSession = (function() {
    function DragSession(behavior) {
      this.behavior = behavior;
      this.protocols = [];
      this.__defineGetter__("protocol", (function(_this) {
        return function() {
          return _this.protocols[0];
        };
      })(this));
    }

    DragSession.prototype.addProtocol = function(type, data) {
      var protocol;
      protocol = new DragManager.Protocol(type, data);
      return this.protocols.push(protocol);
    };

    return DragSession;

  })();

  DragManager.Protocol = (function() {
    Protocol.prototype.type = "Void";

    Protocol.prototype.data = null;

    function Protocol(type1, data1) {
      this.type = type1;
      this.data = data1;
    }

    return Protocol;

  })();

  module.exports = DragManager;

}).call(this);
