// Generated by CoffeeScript 1.10.0
(function() {
  var Properties,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Properties = (function(superClass) {
    extend(Properties, superClass);

    function Properties(target) {
      Properties.__super__.constructor.call(this);
      this.props = {};
      if (target) {
        this.mixin(target);
      }
    }

    Properties.prototype.define = function() {
      var args, property;
      property = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    };

    Properties.prototype.debug = function(fn) {
      this.isDebug = true;
      if (this.log == null) {
        this.log = fn || Logger.debug.bind(console);
      }
      return this;
    };

    Properties.prototype._log = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.isDebug) {
        return this.log.apply(this, args);
      }
    };

    Properties.prototype.mixin = function(target1) {
      this.target = target1;
      if (!this.target.listenBy) {
        Leaf.EventEmitter.mixin(this.target);
      }
      this.target.get = this.get.bind(this);
      this.target.set = this.set.bind(this);
      this.target.define = this.define.bind(this);
      this.target.getWhenAvailable = this.getWhenAvailable.bind(this);
      this.target.getAndListenBy = this.getAndListenBy.bind(this);
      return this.target.forProperties = this.forProperties.bind(this);
    };

    Properties.prototype.toJSON = function() {
      return JSON.parse(JSON.stringify(this.props));
    };

    Properties.prototype.fromJSON = function(props) {
      var prop, results, value;
      results = [];
      for (prop in props) {
        value = props[prop];
        results.push(this.set(prop, value));
      }
      return results;
    };

    Properties.prototype.forProperties = function(callback) {
      var k, ref, results, v;
      if (callback == null) {
        callback = function() {};
      }
      ref = this.props;
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(callback(k, v));
      }
      return results;
    };

    Properties.prototype.set = function(key, value) {
      var oldValue;
      oldValue = this.props[key];
      this.props[key] = value;
      this.emit("change", key, value, oldValue);
      this.fire("property", key, value, oldValue);
      this.emit("change/" + key, value, oldValue);
      this.fire("property/" + key, value, oldValue);
      this._log("set prop", key, "from", oldValue, "to", value);
      return value;
    };

    Properties.prototype.fire = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.target).emit.apply(ref, args);
    };

    Properties.prototype.get = function(key) {
      return this.props[key];
    };

    Properties.prototype.getWhenAvailable = function(key, callback) {
      if (typeof this.props[key] !== "undefined") {
        callback(this.props[key]);
        return;
      }
      return this.target.once("property/" + key, function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return callback.apply(null, args);
      });
    };

    Properties.prototype.getAndListenBy = function(who, key, callback) {
      this.target.listenBy(who, "property/" + key, callback);
      if (typeof this.props[key] !== "undefined") {
        return callback.call(who, this.props[key]);
      }
    };

    Properties.prototype.clear = function() {
      var prop, results;
      for (prop in this.props) {
        this.set(prop);
      }
      results = [];
      for (prop in this.props) {
        results.push(delete this.props[prop]);
      }
      return results;
    };

    return Properties;

  })(Leaf.EventEmitter);

  module.exports = Properties;

}).call(this);
